1@indent:4,maxerr:100000@(function() {^n// jslint.js^n// 2011-08-15^n^n// Copyright (c) 2002 Douglas Crockford (www.JSLint.com)^n^n// Permission is hereby granted, free of charge, to any person obtaining a copy^n// of this software and associated documentation files (the "Software"), to deal^n// in the Software without restriction, including without limitation the rights^n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell^n// copies of the Software, and to permit persons to whom the Software is^n// furnished to do so, subject to the following conditions:^n^n// The above copyright notice and this permission notice shall be included in^n// all copies or substantial portions of the Software.^n^n// The Software shall be used for Good, not Evil.^n^n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR^n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,^n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE^n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER^n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,^n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE^n// SOFTWARE.^n^n// WARNING: JSLint will hurt your feelings.^n^n// JSLINT is a global function. It takes two parameters.^n^n// var myResult = JSLINT(source, option);^n^n// The first parameter is either a string or an array of strings. If it is a^n// string, it will be split on '\n' or '\r'. If it is an array of strings, it^n// is assumed that each string represents one line. The source can be a^n// JavaScript text, or HTML text, or a JSON text, or a CSS text.^n^n// The second parameter is an optional object of options that control the^n// operation of JSLINT. Most of the options are booleans: They are all^n// optional and have a default value of false. One of the options, predef,^n// can be an array of names, which will be used to declare global variables,^n// or an object whose keys are used as global names, with a boolean value^n// that determines if they are assignable.^n^n// If it checks out, JSLINT returns true. Otherwise, it returns false.^n^n// If false, you can inspect JSLINT.errors to find out the problems.^n// JSLINT.errors is an array of objects containing these properties:^n^n// {^n// line : The line (relative to 0) at which the lint was found^n// character : The character (relative to 0) at which the lint was found^n// reason : The problem^n// evidence : The text line in which the problem occurred^n// raw : The raw message before the details were inserted^n// a : The first detail^n// b : The second detail^n// c : The third detail^n// d : The fourth detail^n// }^n^n// If a stopping error was found, a null will be the last element of the^n// JSLINT.errors array. A stopping error means that JSLint was not confident^n// enough to continue. It does not necessarily mean that the error was^n// especially heinous.^n^n// You can request a Function Report, which shows all of the functions^n// and the parameters and vars that they use. This can be used to find^n// implied global variables and other problems. The report is in HTML and^n// can be inserted in an HTML <body>.^n^n// var myReport = JSLINT.report(errors_only);^n^n// If errors_only is true, then the report will be limited to only errors.^n^n// You can request a data structure that contains JSLint's results.^n^n// var myData = JSLINT.data();^n^n// It returns a structure with this form:^n^n// {^n// errors: [^n// {^n// line: NUMBER,^n// character: NUMBER,^n// reason: STRING,^n// evidence: STRING^n// }^n// ],^n// functions: [^n// {^n// name: STRING,^n// line: NUMBER,^n// last: NUMBER,^n// params: [^n// {^n// string: STRING^n// }^n// ],^n// closure: [^n// STRING^n// ],^n// var: [^n// STRING^n// ],^n// exception: [^n// STRING^n// ],^n// outer: [^n// STRING^n// ],^n// unused: [^n// STRING^n// ],^n// undef: [^n// STRING^n// ],^n// global: [^n// STRING^n// ],^n// label: [^n// STRING^n// ]^n// }^n// ],^n// globals: [^n// STRING^n// ],^n// member: {^n// STRING: NUMBER^n// },^n// urls: [^n// STRING^n// ],^n// json: BOOLEAN^n// }^n^n// Empty arrays will not be included.^n^n// You can obtain the parse tree that JSLint constructed while parsing. The^n// latest tree is kept in JSLINT.tree. A nice stringication can be produced^n// with^n^n// JSON.stringify(JSLINT.tree, [^n// 'string', 'arity', 'name', 'first',^n// 'second', 'third', 'block', 'else'^n// ], 4));^n^n// JSLint provides three directives. They look like slashstar comments, and^n// allow for setting options, declaring global variables, and establishing a^n// set of allowed property names.^n^n// These directives respect function scope.^n^n// The jslint directive is a special comment that can set one or more options.^n// The current option set is^n^n// adsafe true, if ADsafe rules should be enforced^n// bitwise true, if bitwise operators should be allowed^n// browser true, if the standard browser globals should be predefined^n// cap true, if upper case HTML should be allowed^n// confusion true, if types can be used inconsistently^n// 'continue' true, if the continuation statement should be tolerated^n// css true, if CSS workarounds should be tolerated^n// debug true, if debugger statements should be allowed^n// devel true, if logging should be allowed (console, alert, etc.)^n// eqeq true, if == should be allowed^n// es5 true, if ES5 syntax should be allowed^n// evil true, if eval should be allowed^n// forin true, if for in statements need not filter^n// fragment true, if HTML fragments should be allowed^n// indent the indentation factor^n// maxerr the maximum number of errors to allow^n// maxlen the maximum length of a source line^n// newcap true, if constructor names capitalization is ignored^n// node true, if Node.js globals should be predefined^n// nomen true, if names may have dangling _^n// on true, if HTML event handlers should be allowed^n// passfail true, if the scan should stop on first error^n// plusplus true, if increment/decrement should be allowed^n// properties true, if all property names must be declared with /*properties*/^n// regexp true, if the . should be allowed in regexp literals^n// rhino true, if the Rhino environment globals should be predefined^n// undef true, if variables can be declared out of order^n// unparam true, if unused parameters should be tolerated^n// safe true, if use of some browser features should be restricted^n// sloppy true, if the 'use strict'; pragma is optional^n// sub true, if all forms of subscript notation are tolerated^n// vars true, if multiple var statements per function should be allowed^n// white true, if sloppy whitespace is tolerated^n// widget true if the Yahoo Widgets globals should be predefined^n// windows true, if MS Windows-specific globals should be predefined^n^n// For example:^n^n    /*jslint^n     evil: true, nomen: true, regexp: true^n     */^n^n// The properties directive declares an exclusive list of property names.^n// Any properties named in the program that are not in the list will^n// produce a warning.^n^n// For example:^n^n    /*properties^n     '\b': string, '\t': string, '\n': string, '\f': string, '\r': string,^n     '!=': boolean, '!==': boolean, '"': string, '%': boolean, '\'': string,^n     '(begin)', '(breakage)': number, '(complexity)', '(confusion)': boolean,^n     '(context)': object, '(error)', '(identifier)', '(line)': number,^n     '(loopage)': number, '(name)', '(old_property_type)', '(params)',^n     '(scope)': object, '(token)', '(vars)', '(verb)', '*': boolean,^n     '+': boolean, '-': boolean, '/': *, '<': boolean, '<=': boolean,^n     '==': boolean, '===': boolean, '>': boolean, '>=': boolean,^n     ADSAFE: boolean, Array, Date, E: string, Function, LN10: string,^n     LN2: string, LOG10E: string, LOG2E: string, MAX_VALUE: string,^n     MIN_VALUE: string, NEGATIVE_INFINITY: string, Object, PI: string,^n     POSITIVE_INFINITY: string, SQRT1_2: string, SQRT2: string, '\\': string,^n     a: object, a_label: string, a_not_allowed: string, a_not_defined: string,^n     a_scope: string, abbr: object, acronym: object, address: object, adsafe,^n     adsafe_a: string, adsafe_autocomplete: string, adsafe_bad_id: string,^n     adsafe_div: string, adsafe_fragment: string, adsafe_go: string,^n     adsafe_html: string, adsafe_id: string, adsafe_id_go: string,^n     adsafe_lib: string, adsafe_lib_second: string, adsafe_missing_id: string,^n     adsafe_name_a: string, adsafe_placement: string, adsafe_prefix_a: string,^n     adsafe_script: string, adsafe_source: string, adsafe_subscript_a: string,^n     adsafe_tag: string, all: boolean, already_defined: string, and: string,^n     applet: object, apply: string, approved: array, area: object,^n     arity: string, article: object, aside: object, assign: boolean,^n     assign_exception: string, assignment_function_expression: string,^n     at: number, attribute_case_a: string, audio: object, autocomplete: string,^n     avoid_a: string, b: *, background: array, 'background-attachment': array,^n     'background-color': array, 'background-image': array,^n     'background-position': array, 'background-repeat': array,^n     bad_assignment: string, bad_color_a: string, bad_constructor: string,^n     bad_entity: string, bad_html: string, bad_id_a: string, bad_in_a: string,^n     bad_invocation: string, bad_name_a: string, bad_new: string,^n     bad_number: string, bad_operand: string, bad_style: string,^n     bad_type: string, bad_url_a: string, bad_wrap: string, base: object,^n     bdo: object, big: object, bind: string, bitwise: boolean, block: array,^n     blockquote: object, body: object, border: array, 'border-bottom': array,^n     'border-bottom-color', 'border-bottom-left-radius',^n     'border-bottom-right-radius', 'border-bottom-style': array,^n     'border-bottom-width', 'border-collapse': array, 'border-color': array,^n     'border-left': array, 'border-left-color', 'border-left-style': array,^n     'border-left-width', 'border-radius', 'border-right': array,^n     'border-right-color', 'border-right-style': array, 'border-right-width',^n     'border-spacing': array, 'border-style': array, 'border-top': array,^n     'border-top-color', 'border-top-left-radius', 'border-top-right-radius',^n     'border-top-style': array, 'border-top-width', 'border-width': array,^n     bottom: array, br: object, braille: boolean, browser: boolean,^n     button: object, c, call: string, canvas: object, cap, caption: object,^n     'caption-side': array, ceil: string, center: object, charAt: *,^n     charCodeAt: *, character, cite: object, clear: array, clip: array, closure,^n     cm: boolean, code: object, col: object, colgroup: object, color,^n     combine_var: string, command: object, concat: string,^n     conditional_assignment: string, confusing_a: string,^n     confusing_regexp: string, confusion: boolean, constructor: string,^n     constructor_name_a: string, content: array, continue, control_a: string,^n     'counter-increment': array, 'counter-reset': array, create: *, css: string,^n     cursor: array, d, dangerous_comment: string, dangling_a: string,^n     data: function object, datalist: object, dd: object, debug,^n     defineProperties: string, defineProperty: string, del: object,^n     deleted: string, details: object, devel: boolean, dfn: object,^n     dialog: object, dir: object, direction: array, display: array,^n     disrupt: boolean, div: object, dl: object, dt: object, duplicate_a: string,^n     edge: string, edition: string, else, em: *, embed: object,^n     embossed: boolean, empty: boolean, 'empty-cells': array,^n     empty_block: string, empty_case: string, empty_class: string,^n     entityify: function, eqeq, errors: array, es5: string, eval, every: string,^n     evidence, evil: string, ex: boolean, exception, exec: *,^n     expected_a: string, expected_a_at_b_c: string, expected_a_b: string,^n     expected_a_b_from_c_d: string, expected_at_a: string,^n     expected_attribute_a: string, expected_attribute_value_a: string,^n     expected_class_a: string, expected_fraction_a: string,^n     expected_id_a: string, expected_identifier_a: string,^n     expected_identifier_a_reserved: string, expected_lang_a: string,^n     expected_linear_a: string, expected_media_a: string,^n     expected_name_a: string, expected_nonstandard_style_attribute: string,^n     expected_number_a: string, expected_operator_a: string,^n     expected_percent_a: string, expected_positive_a: string,^n     expected_pseudo_a: string, expected_selector_a: string,^n     expected_small_a: string, expected_space_a_b: string,^n     expected_string_a: string, expected_style_attribute: string,^n     expected_style_pattern: string, expected_tagname_a: string,^n     expected_type_a: string, f: string, fieldset: object, figure: object,^n     filter: *, first: *, float: array, floor: *, font: *, 'font-family',^n     'font-size': array, 'font-size-adjust': array, 'font-stretch': array,^n     'font-style': array, 'font-variant': array, 'font-weight': array,^n     footer: object, for, forEach: *, for_if: string, forin, form: object,^n     fragment, frame: object, frameset: object, freeze: string, from: number,^n     fromCharCode: function, fud: function, funct: object, function,^n     function_block: string, function_eval: string, function_loop: string,^n     function_statement: string, function_strict: string, functions: array,^n     getDate: string, getDay: string, getFullYear: string, getHours: string,^n     getMilliseconds: string, getMinutes: string, getMonth: string,^n     getOwnPropertyDescriptor: string, getOwnPropertyNames: string,^n     getPrototypeOf: string, getSeconds: string, getTime: string,^n     getTimezoneOffset: string, getUTCDate: string, getUTCDay: string,^n     getUTCFullYear: string, getUTCHours: string, getUTCMilliseconds: string,^n     getUTCMinutes: string, getUTCMonth: string, getUTCSeconds: string,^n     getYear: string, global, globals, h1: object, h2: object, h3: object,^n     h4: object, h5: object, h6: object, handheld: boolean, hasOwnProperty: *,^n     head: object, header: object, height: array, hgroup: object, hr: object,^n     'hta:application': object, html: *, html_confusion_a: string,^n     html_handlers: string, i: object, id: string, identifier: boolean,^n     identifier_function: string, iframe: object, img: object, immed: boolean,^n     implied_evil: string, in, indent: number, indexOf: *, infix_in: string,^n     init: function, input: object, ins: object, insecure_a: string,^n     isAlpha: function, isArray: function boolean, isDigit: function,^n     isExtensible: string, isFrozen: string, isNaN: string,^n     isPrototypeOf: string, isSealed: string, join: *, jslint: function boolean,^n     json: boolean, kbd: object, keygen: object, keys: *, label: object,^n     label_a_b: string, labeled: boolean, lang: string, lastIndex: string,^n     lastIndexOf: *, lbp: number, leading_decimal_a: string, led: function,^n     left: array, legend: object, length: *, 'letter-spacing': array,^n     li: object, lib: boolean, line: number, 'line-height': array, link: object,^n     'list-style': array, 'list-style-image': array,^n     'list-style-position': array, 'list-style-type': array, map: *,^n     margin: array, 'margin-bottom', 'margin-left', 'margin-right',^n     'margin-top', mark: object, 'marker-offset': array, match: function,^n     'max-height': array, 'max-width': array, maxerr: number,^n     maxlen: number, member: object, menu: object, message, meta: object,^n     meter: object, 'min-height': function, 'min-width': function,^n     missing_a: string, missing_a_after_b: string, missing_option: string,^n     missing_property: string, missing_space_a_b: string, missing_url: string,^n     missing_use_strict: string, mixed: string, mm: boolean, mode: string,^n     move_invocation: string, move_var: string, n: string, name: string,^n     name_function: string, nav: object, nested_comment: string,^n     newcap: boolean, node: boolean, noframes: object, nomen, noscript: object,^n     not: string, not_a_constructor: string, not_a_defined: string,^n     not_a_function: string, not_a_label: string, not_a_scope: string,^n     not_greater: string, now: string, nud: function, number: number,^n     object: object, ol: object, on, opacity, open: boolean, optgroup: object,^n     option: object, outer: regexp, outline: array, 'outline-color': array,^n     'outline-style': array, 'outline-width', output: object, overflow: array,^n     'overflow-x': array, 'overflow-y': array, p: object, padding: array,^n     'padding-bottom': function, 'padding-left': function,^n     'padding-right': function, 'padding-top': function,^n     'page-break-after': array, 'page-break-before': array, param: object,^n     parameter_a_get_b: string, parameter_set_a: string, params: array,^n     paren: boolean, parent: string, parse: string, passfail, pc: boolean,^n     plusplus, pop: *, position: array, postscript: boolean, pre: object,^n     predef, preventExtensions: string, print: boolean, progress: object,^n     projection: boolean, properties: boolean, propertyIsEnumerable: string,^n     prototype: string, pt: boolean, push: *, px: boolean, q: object, quote,^n     quotes: array, r: string, radix: string, range: function, raw,^n     read_only: string, reason, redefinition_a: string, reduce: string,^n     reduceRight: string, regexp, replace: function, report: function,^n     reserved: boolean, reserved_a: string, reverse: string, rhino: boolean,^n     right: array, rp: object, rt: object, ruby: object, safe: boolean,^n     samp: object, scanned_a_b: string, screen: boolean, script: object,^n     seal: string, search: function, second: *, section: object, select: object,^n     setDate: string, setDay: string, setFullYear: string, setHours: string,^n     setMilliseconds: string, setMinutes: string, setMonth: string,^n     setSeconds: string, setTime: string, setTimezoneOffset: string,^n     setUTCDate: string, setUTCDay: string, setUTCFullYear: string,^n     setUTCHours: string, setUTCMilliseconds: string, setUTCMinutes: string,^n     setUTCMonth: string, setUTCSeconds: string, setYear: string, shift: *,^n     slash_equal: string, slice: string, sloppy, small: object, some: string,^n     sort: *, source: object, span: object, speech: boolean, splice: string,^n     split: function, src, statement_block: string, stopping: string,^n     strange_loop: string, strict: string, string: string, stringify: string,^n     strong: object, style: *, styleproperty: regexp, sub: object,^n     subscript: string, substr: *, substring: string, sup: object,^n     supplant: function, t: string, table: object, 'table-layout': array,^n     tag_a_in_b: string, tbody: object, td: object, test: *,^n     'text-align': array, 'text-decoration': array, 'text-indent': function,^n     'text-shadow': array, 'text-transform': array, textarea: object,^n     tfoot: object, th: object, thead: object, third: array, thru: number,^n     time: object, title: object, toDateString: string, toExponential: string,^n     toFixed: string, toISOString: string, toJSON: string,^n     toLocaleDateString: string, toLocaleLowerCase: string,^n     toLocaleString: string, toLocaleTimeString: string,^n     toLocaleUpperCase: string, toLowerCase: *, toPrecision: string,^n     toString: function, toTimeString: string, toUTCString: string,^n     toUpperCase: *, token: function, too_long: string, too_many: string,^n     top: array, tr: object, trailing_decimal_a: string, tree: string,^n     trim: string, tt: object, tty: boolean, tv: boolean, type: string,^n     type_confusion_a_b: string, u: object, ul: object, unclosed: string,^n     unclosed_comment: string, unclosed_regexp: string, undef: boolean,^n     undefined, unescaped_a: string, unexpected_a: string,^n     unexpected_char_a_b: string, unexpected_comment: string,^n     unexpected_property_a: string, unexpected_space_a_b: string,^n     'unicode-bidi': array, unnecessary_initialize: string,^n     unnecessary_use: string, unparam, unreachable_a_b: string,^n     unrecognized_style_attribute_a: string, unrecognized_tag_a: string,^n     unsafe: string, unshift: string, unused: array, url: string, urls: array,^n     use_array: string, use_braces: string, use_charAt: string,^n     use_object: string, use_or: string, use_param: string,^n     used_before_a: string, valueOf: string, var: object, var_a_not: string,^n     vars, 'vertical-align': array, video: object, visibility: array,^n     warn: boolean, was: object, weird_assignment: string,^n     weird_condition: string, weird_new: string, weird_program: string,^n     weird_relation: string, weird_ternary: string, white: boolean,^n     'white-space': array, widget: boolean, width: array, windows: boolean,^n     'word-spacing': array, 'word-wrap': array, wrap: boolean,^n     wrap_immediate: string, wrap_regexp: string, write_is_wrong: string,^n     writeable: boolean, 'z-index': array^n     */^n^n// The global directive is used to declare global variables that can^n// be accessed by the program. If a declaration is true, then the variable^n// is writeable. Otherwise, it is read-only.^n^n// We build the application inside a function so that we produce only a single^n// global variable. That function will be invoked immediately, and its return^n// value is the JSLINT function itself. That function is also an object that^n// can contain data and other functions.^n^n    var JSLINT = (function () {^n        'use strict';^n^n        function array_to_object(array, value) {^n            var i, object = {};^n            for (i = 0; i < array.length; i += 1) {^n                object[array[i]] = value;^n            }^n            return object;^n        }^n^n^n        var adsafe_id, // The widget's ADsafe id.^n            adsafe_may, // The widget may load approved scripts.^n            adsafe_top, // At the top of the widget script.^n            adsafe_went, // ADSAFE.go has been called.^n            anonname, // The guessed name for anonymous functions.^n            approved, // ADsafe approved urls.^n^n// These are operators that should not be used with the ! operator.^n^n            bang = {^n                '<' : true,^n                '<=' : true,^n                '==' : true,^n                '===': true,^n                '!==': true,^n                '!=' : true,^n                '>' : true,^n                '>=' : true,^n                '+' : true,^n                '-' : true,^n                '*' : true,^n                '/' : true,^n                '%' : true^n            },^n^n// These are property names that should not be permitted in the safe subset.^n^n            banned = array_to_object([^n                'arguments', 'callee', 'caller', 'constructor', 'eval', 'prototype',^n                'stack', 'unwatch', 'valueOf', 'watch'^n            ], true),^n            begin, // The root token^n^n// browser contains a set of global names that are commonly provided by a^n// web browser environment.^n^n            browser = array_to_object([^n                'clearInterval', 'clearTimeout', 'document', 'event', 'frames',^n                'history', 'Image', 'localStorage', 'location', 'name', 'navigator',^n                'Option', 'parent', 'screen', 'sessionStorage', 'setInterval',^n                'setTimeout', 'Storage', 'window', 'XMLHttpRequest'^n            ], false),^n^n// bundle contains the text messages.^n^n            bundle = {^n                a_label: "'{a}' is a statement label.",^n                a_not_allowed: "'{a}' is not allowed.",^n                a_not_defined: "'{a}' is not defined.",^n                a_scope: "'{a}' used out of scope.",^n                adsafe_a: "ADsafe violation: '{a}'.",^n                adsafe_autocomplete: "ADsafe autocomplete violation.",^n                adsafe_bad_id: "ADSAFE violation: bad id.",^n                adsafe_div: "ADsafe violation: Wrap the widget in a div.",^n                adsafe_fragment: "ADSAFE: Use the fragment option.",^n                adsafe_go: "ADsafe violation: Misformed ADSAFE.go.",^n                adsafe_html: "Currently, ADsafe does not operate on whole HTML " +^n                    "documents. It operates on <div> fragments and .js files.",^n                adsafe_id: "ADsafe violation: id does not match.",^n                adsafe_id_go: "ADsafe violation: Missing ADSAFE.id or ADSAFE.go.",^n                adsafe_lib: "ADsafe lib violation.",^n                adsafe_lib_second: "ADsafe: The second argument to lib must be a function.",^n                adsafe_missing_id: "ADSAFE violation: missing ID_.",^n                adsafe_name_a: "ADsafe name violation: '{a}'.",^n                adsafe_placement: "ADsafe script placement violation.",^n                adsafe_prefix_a: "ADsafe violation: An id must have a '{a}' prefix",^n                adsafe_script: "ADsafe script violation.",^n                adsafe_source: "ADsafe unapproved script source.",^n                adsafe_subscript_a: "ADsafe subscript '{a}'.",^n                adsafe_tag: "ADsafe violation: Disallowed tag '{a}'.",^n                already_defined: "'{a}' is already defined.",^n                and: "The '&&' subexpression should be wrapped in parens.",^n                assign_exception: "Do not assign to the exception parameter.",^n                assignment_function_expression: "Expected an assignment or " +^n                    "function call and instead saw an expression.",^n                attribute_case_a: "Attribute '{a}' not all lower case.",^n                avoid_a: "Avoid '{a}'.",^n                bad_assignment: "Bad assignment.",^n                bad_color_a: "Bad hex color '{a}'.",^n                bad_constructor: "Bad constructor.",^n                bad_entity: "Bad entity.",^n                bad_html: "Bad HTML string",^n                bad_id_a: "Bad id: '{a}'.",^n                bad_in_a: "Bad for in variable '{a}'.",^n                bad_invocation: "Bad invocation.",^n                bad_name_a: "Bad name: '{a}'.",^n                bad_new: "Do not use 'new' for side effects.",^n                bad_number: "Bad number '{a}'.",^n                bad_operand: "Bad operand.",^n                bad_style: "Bad style.",^n                bad_type: "Bad type.",^n                bad_url_a: "Bad url '{a}'.",^n                bad_wrap: "Do not wrap function literals in parens unless they " +^n                    "are to be immediately invoked.",^n                combine_var: "Combine this with the previous 'var' statement.",^n                conditional_assignment: "Expected a conditional expression and " +^n                    "instead saw an assignment.",^n                confusing_a: "Confusing use of '{a}'.",^n                confusing_regexp: "Confusing regular expression.",^n                constructor_name_a: "A constructor name '{a}' should start with " +^n                    "an uppercase letter.",^n                control_a: "Unexpected control character '{a}'.",^n                css: "A css file should begin with |@charset 'UTF-8';",^n                dangling_a: "Unexpected dangling '_' in '{a}'.",^n                dangerous_comment: "Dangerous comment.",^n                deleted: "Only properties should be deleted.",^n                duplicate_a: "Duplicate '{a}'.",^n                empty_block: "Empty block.",^n                empty_case: "Empty case.",^n                empty_class: "Empty class.",^n                es5: "This is an ES5 feature.",^n                evil: "eval is evil.",^n                expected_a: "Expected '{a}'.",^n                expected_a_b: "Expected '{a}' and instead saw '{b}'.",^n                expected_a_b_from_c_d: "Expected '{a}' to match '{b}' from line " +^n                    "{c} and instead saw '{d}'.",^n                expected_at_a: "Expected an at-rule, and instead saw |@{a}.",^n                expected_a_at_b_c: "Expected '{a}' at column {b}, not column {c}.",^n                expected_attribute_a: "Expected an attribute, and instead saw [{a}].",^n                expected_attribute_value_a: "Expected an attribute value and " +^n                    "instead saw '{a}'.",^n                expected_class_a: "Expected a class, and instead saw .{a}.",^n                expected_fraction_a: "Expected a number between 0 and 1 and " +^n                    "instead saw '{a}'",^n                expected_id_a: "Expected an id, and instead saw #{a}.",^n                expected_identifier_a: "Expected an identifier and instead saw '{a}'.",^n                expected_identifier_a_reserved: "Expected an identifier and " +^n                    "instead saw '{a}' (a reserved word).",^n                expected_linear_a: "Expected a linear unit and instead saw '{a}'.",^n                expected_lang_a: "Expected a lang code, and instead saw :{a}.",^n                expected_media_a: "Expected a CSS media type, and instead saw '{a}'.",^n                expected_name_a: "Expected a name and instead saw '{a}'.",^n                expected_nonstandard_style_attribute: "Expected a non-standard " +^n                    "style attribute and instead saw '{a}'.",^n                expected_number_a: "Expected a number and instead saw '{a}'.",^n                expected_operator_a: "Expected an operator and instead saw '{a}'.",^n                expected_percent_a: "Expected a percentage and instead saw '{a}'",^n                expected_positive_a: "Expected a positive number and instead saw '{a}'",^n                expected_pseudo_a: "Expected a pseudo, and instead saw :{a}.",^n                expected_selector_a: "Expected a CSS selector, and instead saw {a}.",^n                expected_small_a: "Expected a small positive integer and instead saw '{a}'",^n                expected_space_a_b: "Expected exactly one space between '{a}' and '{b}'.",^n                expected_string_a: "Expected a string and instead saw {a}.",^n                expected_style_attribute: "Excepted a style attribute, and instead saw '{a}'.",^n                expected_style_pattern: "Expected a style pattern, and instead saw '{a}'.",^n                expected_tagname_a: "Expected a tagName, and instead saw {a}.",^n                expected_type_a: "Expected a type, and instead saw {a}.",^n                for_if: "The body of a for in should be wrapped in an if " +^n                    "statement to filter unwanted properties from the prototype.",^n                function_block: "Function statements should not be placed in blocks. " +^n                    "Use a function expression or move the statement to the top of " +^n                    "the outer function.",^n                function_eval: "The Function constructor is eval.",^n                function_loop: "Don't make functions within a loop.",^n                function_statement: "Function statements are not invocable. " +^n                    "Wrap the whole function invocation in parens.",^n                function_strict: "Use the function form of 'use strict'.",^n                html_confusion_a: "HTML confusion in regular expression '<{a}'.",^n                html_handlers: "Avoid HTML event handlers.",^n                identifier_function: "Expected an identifier in an assignment " +^n                    "and instead saw a function invocation.",^n                implied_evil: "Implied eval is evil. Pass a function instead of a string.",^n                infix_in: "Unexpected 'in'. Compare with undefined, or use the " +^n                    "hasOwnProperty method instead.",^n                insecure_a: "Insecure '{a}'.",^n                isNaN: "Use the isNaN function to compare with NaN.",^n                label_a_b: "Label '{a}' on '{b}' statement.",^n                lang: "lang is deprecated.",^n                leading_decimal_a: "A leading decimal point can be confused with a dot: '.{a}'.",^n                missing_a: "Missing '{a}'.",^n                missing_a_after_b: "Missing '{a}' after '{b}'.",^n                missing_option: "Missing option value.",^n                missing_property: "Missing property name.",^n                missing_space_a_b: "Missing space between '{a}' and '{b}'.",^n                missing_url: "Missing url.",^n                missing_use_strict: "Missing 'use strict' statement.",^n                mixed: "Mixed spaces and tabs.",^n                move_invocation: "Move the invocation into the parens that " +^n                    "contain the function.",^n                move_var: "Move 'var' declarations to the top of the function.",^n                name_function: "Missing name in function statement.",^n                nested_comment: "Nested comment.",^n                not: "Nested not.",^n                not_a_constructor: "Do not use {a} as a constructor.",^n                not_a_defined: "'{a}' has not been fully defined yet.",^n                not_a_function: "'{a}' is not a function.",^n                not_a_label: "'{a}' is not a label.",^n                not_a_scope: "'{a}' is out of scope.",^n                not_greater: "'{a}' should not be greater than '{b}'.",^n                parameter_a_get_b: "Unexpected parameter '{a}' in get {b} function.",^n                parameter_set_a: "Expected parameter (value) in set {a} function.",^n                radix: "Missing radix parameter.",^n                read_only: "Read only.",^n                redefinition_a: "Redefinition of '{a}'.",^n                reserved_a: "Reserved name '{a}'.",^n                scanned_a_b: "{a} ({b}% scanned).",^n                slash_equal: "A regular expression literal can be confused with '/='.",^n                statement_block: "Expected to see a statement and instead saw a block.",^n                stopping: "Stopping. ",^n                strange_loop: "Strange loop.",^n                strict: "Strict violation.",^n                subscript: "['{a}'] is better written in dot notation.",^n                tag_a_in_b: "A '<{a}>' must be within '<{b}>'.",^n                too_long: "Line too long.",^n                too_many: "Too many errors.",^n                trailing_decimal_a: "A trailing decimal point can be confused " +^n                    "with a dot: '.{a}'.",^n                type: "type is unnecessary.",^n                type_confusion_a_b: "Type confusion: {a} and {b}.",^n                unclosed: "Unclosed string.",^n                unclosed_comment: "Unclosed comment.",^n                unclosed_regexp: "Unclosed regular expression.",^n                unescaped_a: "Unescaped '{a}'.",^n                unexpected_a: "Unexpected '{a}'.",^n                unexpected_char_a_b: "Unexpected character '{a}' in {b}.",^n                unexpected_comment: "Unexpected comment.",^n                unexpected_property_a: "Unexpected /*property*/ '{a}'.",^n                unexpected_space_a_b: "Unexpected space between '{a}' and '{b}'.",^n                unnecessary_initialize: "It is not necessary to initialize '{a}' " +^n                    "to 'undefined'.",^n                unnecessary_use: "Unnecessary 'use strict'.",^n                unreachable_a_b: "Unreachable '{a}' after '{b}'.",^n                unrecognized_style_attribute_a: "Unrecognized style attribute '{a}'.",^n                unrecognized_tag_a: "Unrecognized tag '<{a}>'.",^n                unsafe: "Unsafe character.",^n                url: "JavaScript URL.",^n                use_array: "Use the array literal notation [].",^n                use_braces: "Spaces are hard to count. Use {{a}}.",^n                use_charAt: "Use the charAt method.",^n                use_object: "Use the object literal notation {}.",^n                use_or: "Use the |||| operator.",^n                use_param: "Use a named parameter.",^n                used_before_a: "'{a}' was used before it was defined.",^n                var_a_not: "Variable {a} was not declared correctly.",^n                weird_assignment: "Weird assignment.",^n                weird_condition: "Weird condition.",^n                weird_new: "Weird construction. Delete 'new'.",^n                weird_program: "Weird program.",^n                weird_relation: "Weird relation.",^n                weird_ternary: "Weird ternary.",^n                wrap_immediate: "Wrap an immediate function invocation in parentheses " +^n                    "to assist the reader in understanding that the expression " +^n                    "is the result of a function, and not the function itself.",^n                wrap_regexp: "Wrap the /regexp/ literal in parens to " +^n                    "disambiguate the slash operator.",^n                write_is_wrong: "document.write can be a form of eval."^n            },^n            comments_off,^n            css_attribute_data,^n            css_any,^n^n            css_colorData = array_to_object([^n                "aliceblue", "antiquewhite", "aqua", "aquamarine", "azure", "beige",^n                "bisque", "black", "blanchedalmond", "blue", "blueviolet", "brown",^n                "burlywood", "cadetblue", "chartreuse", "chocolate", "coral",^n                "cornflowerblue", "cornsilk", "crimson", "cyan", "darkblue",^n                "darkcyan", "darkgoldenrod", "darkgray", "darkgreen", "darkkhaki",^n                "darkmagenta", "darkolivegreen", "darkorange", "darkorchid",^n                "darkred", "darksalmon", "darkseagreen", "darkslateblue",^n                "darkslategray", "darkturquoise", "darkviolet", "deeppink",^n                "deepskyblue", "dimgray", "dodgerblue", "firebrick", "floralwhite",^n                "forestgreen", "fuchsia", "gainsboro", "ghostwhite", "gold",^n                "goldenrod", "gray", "green", "greenyellow", "honeydew", "hotpink",^n                "indianred", "indigo", "ivory", "khaki", "lavender",^n                "lavenderblush", "lawngreen", "lemonchiffon", "lightblue",^n                "lightcoral", "lightcyan", "lightgoldenrodyellow", "lightgreen",^n                "lightpink", "lightsalmon", "lightseagreen", "lightskyblue",^n                "lightslategray", "lightsteelblue", "lightyellow", "lime",^n                "limegreen", "linen", "magenta", "maroon", "mediumaquamarine",^n                "mediumblue", "mediumorchid", "mediumpurple", "mediumseagreen",^n                "mediumslateblue", "mediumspringgreen", "mediumturquoise",^n                "mediumvioletred", "midnightblue", "mintcream", "mistyrose",^n                "moccasin", "navajowhite", "navy", "oldlace", "olive", "olivedrab",^n                "orange", "orangered", "orchid", "palegoldenrod", "palegreen",^n                "paleturquoise", "palevioletred", "papayawhip", "peachpuff",^n                "peru", "pink", "plum", "powderblue", "purple", "red", "rosybrown",^n                "royalblue", "saddlebrown", "salmon", "sandybrown", "seagreen",^n                "seashell", "sienna", "silver", "skyblue", "slateblue", "slategray",^n                "snow", "springgreen", "steelblue", "tan", "teal", "thistle",^n                "tomato", "turquoise", "violet", "wheat", "white", "whitesmoke",^n                "yellow", "yellowgreen",^n^n                "activeborder", "activecaption", "appworkspace", "background",^n                "buttonface", "buttonhighlight", "buttonshadow", "buttontext",^n                "captiontext", "graytext", "highlight", "highlighttext",^n                "inactiveborder", "inactivecaption", "inactivecaptiontext",^n                "infobackground", "infotext", "menu", "menutext", "scrollbar",^n                "threeddarkshadow", "threedface", "threedhighlight",^n                "threedlightshadow", "threedshadow", "window", "windowframe",^n                "windowtext"^n            ], true),^n^n            css_border_style,^n            css_break,^n^n            css_lengthData = {^n                '%': true,^n                'cm': true,^n                'em': true,^n                'ex': true,^n                'in': true,^n                'mm': true,^n                'pc': true,^n                'pt': true,^n                'px': true^n            },^n^n            css_media,^n            css_overflow,^n^n            descapes = {^n                'b': '\b',^n                't': '\t',^n                'n': '\n',^n                'f': '\f',^n                'r': '\r',^n                '"': '"',^n                '/': '/',^n                '\\': '\\'^n            },^n^n            devel = array_to_object([^n                'alert', 'confirm', 'console', 'Debug', 'opera', 'prompt', 'WSH'^n            ], false),^n            directive,^n            escapes = {^n                '\b': '\\b',^n                '\t': '\\t',^n                '\n': '\\n',^n                '\f': '\\f',^n                '\r': '\\r',^n                '\'': '\\\'',^n                '"' : '\\"',^n                '/' : '\\/',^n                '\\': '\\\\'^n            },^n^n            funct, // The current function, including the labels used in^n            // the function, as well as (breakage), (complexity),^n            // (context), (loopage), (name), (params), (token),^n            // (vars), (verb)^n^n            functionicity = [^n                'closure', 'exception', 'global', 'label', 'outer', 'undef',^n                'unused', 'var'^n            ],^n^n            functions, // All of the functions^n            global_funct, // The global body^n            global_scope, // The global scope^n            html_tag = {^n                a: {},^n                abbr: {},^n                acronym: {},^n                address: {},^n                applet: {},^n                area: {empty: true, parent: ' map '},^n                article: {},^n                aside: {},^n                audio: {},^n                b: {},^n                base: {empty: true, parent: ' head '},^n                bdo: {},^n                big: {},^n                blockquote: {},^n                body: {parent: ' html noframes '},^n                br: {empty: true},^n                button: {},^n                canvas: {parent: ' body p div th td '},^n                caption: {parent: ' table '},^n                center: {},^n                cite: {},^n                code: {},^n                col: {empty: true, parent: ' table colgroup '},^n                colgroup: {parent: ' table '},^n                command: {parent: ' menu '},^n                datalist: {},^n                dd: {parent: ' dl '},^n                del: {},^n                details: {},^n                dialog: {},^n                dfn: {},^n                dir: {},^n                div: {},^n                dl: {},^n                dt: {parent: ' dl '},^n                em: {},^n                embed: {},^n                fieldset: {},^n                figure: {},^n                font: {},^n                footer: {},^n                form: {},^n                frame: {empty: true, parent: ' frameset '},^n                frameset: {parent: ' html frameset '},^n                h1: {},^n                h2: {},^n                h3: {},^n                h4: {},^n                h5: {},^n                h6: {},^n                head: {parent: ' html '},^n                header: {},^n                hgroup: {},^n                hr: {empty: true},^n                'hta:application':^n                {empty: true, parent: ' head '},^n                html: {parent: '*'},^n                i: {},^n                iframe: {},^n                img: {empty: true},^n                input: {empty: true},^n                ins: {},^n                kbd: {},^n                keygen: {},^n                label: {},^n                legend: {parent: ' details fieldset figure '},^n                li: {parent: ' dir menu ol ul '},^n                link: {empty: true, parent: ' head '},^n                map: {},^n                mark: {},^n                menu: {},^n                meta: {empty: true, parent: ' head noframes noscript '},^n                meter: {},^n                nav: {},^n                noframes: {parent: ' html body '},^n                noscript: {parent: ' body head noframes '},^n                object: {},^n                ol: {},^n                optgroup: {parent: ' select '},^n                option: {parent: ' optgroup select '},^n                output: {},^n                p: {},^n                param: {empty: true, parent: ' applet object '},^n                pre: {},^n                progress: {},^n                q: {},^n                rp: {},^n                rt: {},^n                ruby: {},^n                samp: {},^n                script: {empty: true, parent: ' body div frame head iframe p pre span '},^n                section: {},^n                select: {},^n                small: {},^n                span: {},^n                source: {},^n                strong: {},^n                style: {parent: ' head ', empty: true},^n                sub: {},^n                sup: {},^n                table: {},^n                tbody: {parent: ' table '},^n                td: {parent: ' tr '},^n                textarea: {},^n                tfoot: {parent: ' table '},^n                th: {parent: ' tr '},^n                thead: {parent: ' table '},^n                time: {},^n                title: {parent: ' head '},^n                tr: {parent: ' table tbody thead tfoot '},^n                tt: {},^n                u: {},^n                ul: {},^n                'var': {},^n                video: {}^n            },^n^n            ids, // HTML ids^n            in_block,^n            indent,^n            infer_statement,// Inference rules for statements^n            is_type = array_to_object([^n                '*', 'array', 'boolean', 'function', 'number', 'object',^n                'regexp', 'string'^n            ], true),^n            itself, // JSLint itself^n            jslint_limit = {^n                indent: 10,^n                maxerr: 1000,^n                maxlen: 256^n            },^n            json_mode,^n            lex, // the tokenizer^n            lines,^n            lookahead,^n            member,^n            node = array_to_object([^n                'Buffer', 'clearInterval', 'clearTimeout', 'console', 'exports',^n                'global', 'module', 'process', 'querystring', 'require',^n                'setInterval', 'setTimeout', '__dirname', '__filename'^n            ], false),^n            node_js,^n            numbery = array_to_object(['indexOf', 'lastIndexOf', 'search'], true),^n            next_token,^n            option,^n            predefined, // Global variables defined by option^n            prereg,^n            prev_token,^n            property_type,^n            regexp_flag = array_to_object(['g', 'i', 'm'], true),^n            return_this = function return_this() {^n                return this;^n            },^n            rhino = array_to_object([^n                'defineClass', 'deserialize', 'gc', 'help', 'load', 'loadClass',^n                'print', 'quit', 'readFile', 'readUrl', 'runCommand', 'seal',^n                'serialize', 'spawn', 'sync', 'toint32', 'version'^n            ], false),^n^n            scope, // An object containing an object for each variable in scope^n            semicolon_coda = array_to_object([';', '"', '\'', ')'], true),^n            src,^n            stack,^n^n// standard contains the global names that are provided by the^n// ECMAScript standard.^n^n            standard = array_to_object([^n                'Array', 'Boolean', 'Date', 'decodeURI', 'decodeURIComponent',^n                'encodeURI', 'encodeURIComponent', 'Error', 'eval', 'EvalError',^n                'Function', 'isFinite', 'isNaN', 'JSON', 'Math', 'Number', 'Object',^n                'parseInt', 'parseFloat', 'RangeError', 'ReferenceError', 'RegExp',^n                'String', 'SyntaxError', 'TypeError', 'URIError'^n            ], false),^n^n            standard_property_type = {^n                E : 'number',^n                LN2 : 'number',^n                LN10 : 'number',^n                LOG2E : 'number',^n                LOG10E : 'number',^n                MAX_VALUE : 'number',^n                MIN_VALUE : 'number',^n                NEGATIVE_INFINITY : 'number',^n                PI : 'number',^n                POSITIVE_INFINITY : 'number',^n                SQRT1_2 : 'number',^n                SQRT2 : 'number',^n                apply : 'function',^n                bind : 'function function',^n                call : 'function',^n                ceil : 'function number',^n                charAt : 'function string',^n                concat : 'function',^n                constructor : 'function object',^n                create : 'function object',^n                defineProperty : 'function object',^n                defineProperties : 'function object',^n                every : 'function boolean',^n                exec : 'function array',^n                filter : 'function array',^n                floor : 'function number',^n                forEach : 'function',^n                freeze : 'function object',^n                getDate : 'function number',^n                getDay : 'function number',^n                getFullYear : 'function number',^n                getHours : 'function number',^n                getMilliseconds : 'function number',^n                getMinutes : 'function number',^n                getMonth : 'function number',^n                getOwnPropertyDescriptor^n                    : 'function object',^n                getOwnPropertyNames : 'function array',^n                getPrototypeOf : 'function object',^n                getSeconds : 'function number',^n                getTime : 'function number',^n                getTimezoneOffset : 'function number',^n                getUTCDate : 'function number',^n                getUTCDay : 'function number',^n                getUTCFullYear : 'function number',^n                getUTCHours : 'function number',^n                getUTCMilliseconds : 'function number',^n                getUTCMinutes : 'function number',^n                getUTCMonth : 'function number',^n                getUTCSeconds : 'function number',^n                getYear : 'function number',^n                hasOwnProperty : 'function boolean',^n                indexOf : 'function number',^n                isExtensible : 'function boolean',^n                isFrozen : 'function boolean',^n                isPrototypeOf : 'function boolean',^n                isSealed : 'function boolean',^n                join : 'function string',^n                keys : 'function array',^n                lastIndexOf : 'function number',^n                lastIndex : 'number',^n                length : 'number',^n                map : 'function array',^n                now : 'function number',^n                parse : 'function',^n                pop : 'function',^n                preventExtensions : 'function object',^n                propertyIsEnumerable: 'function boolean',^n                prototype : 'object',^n                push : 'function number',^n                reduce : 'function',^n                reduceRight : 'function',^n                reverse : 'function',^n                seal : 'function object',^n                setDate : 'function',^n                setDay : 'function',^n                setFullYear : 'function',^n                setHours : 'function',^n                setMilliseconds : 'function',^n                setMinutes : 'function',^n                setMonth : 'function',^n                setSeconds : 'function',^n                setTime : 'function',^n                setTimezoneOffset : 'function',^n                setUTCDate : 'function',^n                setUTCDay : 'function',^n                setUTCFullYear : 'function',^n                setUTCHours : 'function',^n                setUTCMilliseconds : 'function',^n                setUTCMinutes : 'function',^n                setUTCMonth : 'function',^n                setUTCSeconds : 'function',^n                setYear : 'function',^n                shift : 'function',^n                slice : 'function',^n                some : 'function boolean',^n                sort : 'function',^n                splice : 'function',^n                stringify : 'function string',^n                substr : 'function string',^n                substring : 'function string',^n                test : 'function boolean',^n                toDateString : 'function string',^n                toExponential : 'function string',^n                toFixed : 'function string',^n                toJSON : 'function',^n                toISOString : 'function string',^n                toLocaleDateString : 'function string',^n                toLocaleLowerCase : 'function string',^n                toLocaleUpperCase : 'function string',^n                toLocaleString : 'function string',^n                toLocaleTimeString : 'function string',^n                toLowerCase : 'function string',^n                toPrecision : 'function string',^n                toTimeString : 'function string',^n                toUpperCase : 'function string',^n                toUTCString : 'function string',^n                trim : 'function string',^n                unshift : 'function number',^n                valueOf : 'function'^n            },^n^n            strict_mode,^n            syntax = {},^n            tab,^n            token,^n            type_state_change,^n            urls,^n            var_mode,^n            warnings,^n^n// widget contains the global names which are provided to a Yahoo^n// (fna Konfabulator) widget.^n^n            widget = array_to_object([^n                'alert', 'animator', 'appleScript', 'beep', 'bytesToUIString',^n                'Canvas', 'chooseColor', 'chooseFile', 'chooseFolder',^n                'closeWidget', 'COM', 'convertPathToHFS', 'convertPathToPlatform',^n                'CustomAnimation', 'escape', 'FadeAnimation', 'filesystem', 'Flash',^n                'focusWidget', 'form', 'FormField', 'Frame', 'HotKey', 'Image',^n                'include', 'isApplicationRunning', 'iTunes', 'konfabulatorVersion',^n                'log', 'md5', 'MenuItem', 'MoveAnimation', 'openURL', 'play',^n                'Point', 'popupMenu', 'preferenceGroups', 'preferences', 'print',^n                'prompt', 'random', 'Rectangle', 'reloadWidget', 'ResizeAnimation',^n                'resolvePath', 'resumeUpdates', 'RotateAnimation', 'runCommand',^n                'runCommandInBg', 'saveAs', 'savePreferences', 'screen',^n                'ScrollBar', 'showWidgetPreferences', 'sleep', 'speak', 'Style',^n                'suppressUpdates', 'system', 'tellWidget', 'Text', 'TextArea',^n                'Timer', 'unescape', 'updateNow', 'URL', 'Web', 'widget', 'Window',^n                'XMLDOM', 'XMLHttpRequest', 'yahooCheckLogin', 'yahooLogin',^n                'yahooLogout'^n            ], true),^n^n            windows = array_to_object([^n                'ActiveXObject', 'CScript', 'Debug', 'Enumerator', 'System',^n                'VBArray', 'WScript', 'WSH'^n            ], false),^n^n// xmode is used to adapt to the exceptions in html parsing.^n// It can have these states:^n// '' .js script file^n// 'html'^n// 'outer'^n// 'script'^n// 'style'^n// 'scriptstring'^n// 'styleproperty'^n^n            xmode,^n            xquote,^n^n// Regular expressions. Some of these are stupidly long.^n^n// unsafe comment or string^n            ax = /|@cc||<\/?||script||\]\s*\]||<\s*!||&lt/i,^n// carriage return, or carriage return linefeed^n            crx = /\r/g,^n            crlfx = /\r\n/g,^n// unsafe characters that are silently deleted by one or more browsers^n            cx = /[\u0000-\u001f\u007f-\u009f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/,^n// query characters for ids^n            dx = /[\[\]\/\\"'*<>.&:(){}+=#]/,^n// html token^n            hx = /^^\s*(['"=>\/&#]||<(?:\/||\!(?:--)?)?||[a-zA-Z][a-zA-Z0-9_\-:]*||[0-9]+||--)/,^n// identifier^n            ix = /^^([a-zA-Z_$][a-zA-Z0-9_$]*)$/,^n// javascript url^n            jx = /^^(?:javascript||jscript||ecmascript||vbscript||mocha||livescript)\s*:/i,^n// star slash^n            lx = /\*\/||\/\*/,^n// characters in strings that need escapement^n            nx = /[\u0000-\u001f'\\\u007f-\u009f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,^n// outer html token^n            ox = /[>&]||<[\/!]?||--/,^n// attributes characters^n            qx = /[^^a-zA-Z0-9+\-_\/ ]/,^n// style^n            sx = /^^\s*([{}:#%.=,>+\[\]|@()"';]||\*=?||\$=||\||=||\^^=||~=||[a-zA-Z_][a-zA-Z0-9_\-]*||[0-9]+||<\/||\/\*)/,^n            ssx = /^^\s*([|@#!"'};:\-%.=,+\[\]()*_]||[a-zA-Z][a-zA-Z0-9._\-]*||\/\*?||\d+(?:\.\d+)?||<\/)/,^n// token^n            tx = /^^\s*([(){}\[.,:;'"~\?\]#|@]||==?=?||\/(\*(jslint||properties||property||members?||globals?)?||=||\/)?||\*[\/=]?||\+(?:=||\++)?||-(?:=||-+)?||%=?||&[&=]?||\||[||=]?||>>?>?=?||<([\/=!]||\!(\[||--)?||<=?)?||\^^=?||\!=?=?||[a-zA-Z_$][a-zA-Z0-9_$]*||[0-9]+([xX][0-9a-fA-F]+||\.[0-9]*)?([eE][+\-]?[0-9]+)?)/,^n// url badness^n            ux = /&||\+||\u00AD||\.\.||\/\*||%[^^;]||base64||url||expression||data||mailto||script/i,^n^n            rx = {^n                outer: hx,^n                html: hx,^n                style: sx,^n                styleproperty: ssx^n            };^n^n^n        function F() {} // Used by Object.create^n^n// Provide critical ES5 functions to ES3.^n^n        if (typeof Array.prototype.filter !== 'function') {^n            Array.prototype.filter = function (f) {^n                var i, length = this.length, result = [], value;^n                for (i = 0; i < length; i += 1) {^n                    try {^n                        value = this[i];^n                        if (f(value)) {^n                            result.push(value);^n                        }^n                    } catch (ignore) {^n                    }^n                }^n                return result;^n            };^n        }^n^n        if (typeof Array.prototype.forEach !== 'function') {^n            Array.prototype.forEach = function (f) {^n                var i, length = this.length;^n                for (i = 0; i < length; i += 1) {^n                    try {^n                        f(this[i]);^n                    } catch (ignore) {^n                    }^n                }^n            };^n        }^n^n        if (typeof Array.isArray !== 'function') {^n            Array.isArray = function (o) {^n                return Object.prototype.toString.apply(o) === '[object Array]';^n            };^n        }^n^n        if (!Object.prototype.hasOwnProperty.call(Object, 'create')) {^n            Object.create = function (o) {^n                F.prototype = o;^n                return new F();^n            };^n        }^n^n        if (typeof Object.keys !== 'function') {^n            Object.keys = function (o) {^n                var array = [], key;^n                for (key in o) {^n                    if (Object.prototype.hasOwnProperty.call(o, key)) {^n                        array.push(key);^n                    }^n                }^n                return array;^n            };^n        }^n^n        if (typeof String.prototype.entityify !== 'function') {^n            String.prototype.entityify = function () {^n                return this^n                    .replace(/&/g, '&amp;')^n                    .replace(/</g, '&lt;')^n                    .replace(/>/g, '&gt;');^n            };^n        }^n^n        if (typeof String.prototype.isAlpha !== 'function') {^n            String.prototype.isAlpha = function () {^n                return (this >= 'a' && this <= 'z\uffff') ||||^n                    (this >= 'A' && this <= 'Z\uffff');^n            };^n        }^n^n        if (typeof String.prototype.isDigit !== 'function') {^n            String.prototype.isDigit = function () {^n                return (this >= '0' && this <= '9');^n            };^n        }^n^n        if (typeof String.prototype.supplant !== 'function') {^n            String.prototype.supplant = function (o) {^n                return this.replace(/\{([^^{}]*)\}/g, function (a, b) {^n                    var replacement = o[b];^n                    return typeof replacement === 'string' ||||^n                        typeof replacement === 'number' ? replacement : a;^n                });^n            };^n        }^n^n^n        function sanitize(a) {^n^n// Escapify a troublesome character.^n^n            return escapes[a] ||||^n                '\\u' + ('0000' + a.charCodeAt().toString(16)).slice(-4);^n        }^n^n^n        function add_to_predefined(group) {^n            Object.keys(group).forEach(function (name) {^n                predefined[name] = group[name];^n            });^n        }^n^n^n        function assume() {^n            if (!option.safe) {^n                if (option.rhino) {^n                    add_to_predefined(rhino);^n                    option.rhino = false;^n                }^n                if (option.devel) {^n                    add_to_predefined(devel);^n                    option.devel = false;^n                }^n                if (option.browser) {^n                    add_to_predefined(browser);^n                    option.browser = false;^n                }^n                if (option.windows) {^n                    add_to_predefined(windows);^n                    option.windows = false;^n                }^n                if (option.node) {^n                    add_to_predefined(node);^n                    option.node = false;^n                    node_js = true;^n                }^n                if (option.widget) {^n                    add_to_predefined(widget);^n                    option.widget = false;^n                }^n            }^n            if (option.type) {^n                option.confusion = true;^n            }^n        }^n^n^n// Produce an error warning.^n^n        function artifact(tok) {^n            if (!tok) {^n                tok = next_token;^n            }^n            return tok.number |||| tok.string;^n        }^n^n        function quit(message, line, character) {^n            throw {^n                name: 'JSLintError',^n                line: line,^n                character: character,^n                message: bundle.scanned_a_b.supplant({^n                    a: message,^n                    b: Math.floor((line / lines.length) * 100)^n                })^n            };^n        }^n^n        function warn(message, offender, a, b, c, d) {^n            var character, line, warning;^n            offender = offender |||| next_token; // `~^n            line = offender.line |||| 0;^n            character = offender.from |||| 0;^n            warning = {^n                id: '(error)',^n                raw: bundle[message] |||| message,^n                evidence: lines[line - 1] |||| '',^n                line: line,^n                character: character,^n                a: a |||| (offender.id === '(number)' ?^n                    String(offender.number) : offender.string),^n                b: b,^n                c: c,^n                d: d^n            };^n            warning.reason = warning.raw.supplant(warning);^n            JSLINT.errors.push(warning);^n            if (option.passfail) {^n                quit(bundle.stopping, line, character);^n            }^n            warnings += 1;^n            if (warnings >= option.maxerr) {^n                quit(bundle.too_many, line, character);^n            }^n            return warning;^n        }^n^n        function warn_at(message, line, character, a, b, c, d) {^n            return warn(message, {^n                line: line,^n                from: character^n            }, a, b, c, d);^n        }^n^n        function stop(message, offender, a, b, c, d) {^n            var warning = warn(message, offender, a, b, c, d);^n            quit(bundle.stopping, warning.line, warning.character);^n        }^n^n        function stop_at(message, line, character, a, b, c, d) {^n            return stop(message, {^n                line: line,^n                from: character^n            }, a, b, c, d);^n        }^n^n        function expected_at(at) {^n            if (!option.white && next_token.from !== at) {^n                warn('expected_a_at_b_c', next_token, '', at,^n                    next_token.from);^n            }^n        }^n^n        function aint(it, name, expected) {^n            if (it[name] !== expected) {^n                warn('expected_a_b', it, expected, it[name]);^n                return true;^n            } else {^n                return false;^n            }^n        }^n^n^n// lexical analysis and token construction^n^n        lex = (function lex() {^n            var character, c, from, length, line, pos, source_row;^n^n// Private lex methods^n^n            function next_line() {^n                var at;^n                if (line >= lines.length) {^n                    return false;^n                }^n                character = 1;^n                source_row = lines[line];^n                line += 1;^n                at = source_row.search(/ \t/);^n                if (at >= 0) {^n                    warn_at('mixed', line, at + 1);^n                }^n                source_row = source_row.replace(/\t/g, tab);^n                at = source_row.search(cx);^n                if (at >= 0) {^n                    warn_at('unsafe', line, at);^n                }^n                if (option.maxlen && option.maxlen < source_row.length) {^n                    warn_at('too_long', line, source_row.length);^n                }^n                return true;^n            }^n^n// Produce a token object. The token inherits from a syntax symbol.^n^n            function it(type, value, quote) {^n                var id, the_token;^n                if (type === '(string)' |||| type === '(range)') {^n                    if (jx.test(value)) {^n                        warn_at('url', line, from);^n                    }^n                }^n                the_token = Object.create(syntax[(^n                    type === '(punctuator)' ||||^n                        (type === '(identifier)' &&^n                            Object.prototype.hasOwnProperty.call(syntax, value)) ?^n                        value :^n                        type^n                    )] |||| syntax['(error)']);^n                if (type === '(identifier)') {^n                    the_token.identifier = true;^n                    if (value === '__iterator__' |||| value === '__proto__') {^n                        stop_at('reserved_a', line, from, value);^n                    } else if (!option.nomen &&^n                        (value.charAt(0) === '_' ||||^n                            value.charAt(value.length - 1) === '_')) {^n                        warn_at('dangling_a', line, from, value);^n                    }^n                }^n                if (type === '(number)') {^n                    the_token.number = +value;^n                } else if (value !== undefined) {^n                    the_token.string = String(value);^n                }^n                if (quote) {^n                    the_token.quote = quote;^n                }^n                the_token.line = line;^n                the_token.from = from;^n                the_token.thru = character;^n                id = the_token.id;^n                prereg = id && (^n                    ('(,=:[!&||?{};'.indexOf(id.charAt(id.length - 1)) >= 0) ||||^n                        id === 'return'^n                    );^n                return the_token;^n            }^n^n            function match(x) {^n                var exec = x.exec(source_row), first;^n                if (exec) {^n                    length = exec[0].length;^n                    first = exec[1];^n                    c = first.charAt(0);^n                    source_row = source_row.slice(length);^n                    from = character + length - first.length;^n                    character += length;^n                    return first;^n                }^n            }^n^n            function string(x) {^n                var c, pos = 0, r = '';^n^n                function hex(n) {^n                    var i = parseInt(source_row.substr(pos + 1, n), 16);^n                    pos += n;^n                    if (i >= 32 && i <= 126 &&^n                        i !== 34 && i !== 92 && i !== 39) {^n                        warn_at('unexpected_a', line, character, '\\');^n                    }^n                    character += n;^n                    c = String.fromCharCode(i);^n                }^n^n                if (json_mode && x !== '"') {^n                    warn_at('expected_a', line, character, '"');^n                }^n^n                if (xquote === x |||| (xmode === 'scriptstring' && !xquote)) {^n                    return it('(punctuator)', x);^n                }^n^n                for (;;) {^n                    while (pos >= source_row.length) {^n                        pos = 0;^n                        if (xmode !== 'html' |||| !next_line()) {^n                            stop_at('unclosed', line, from);^n                        }^n                    }^n                    c = source_row.charAt(pos);^n                    if (c === x) {^n                        character += 1;^n                        source_row = source_row.slice(pos + 1);^n                        return it('(string)', r, x);^n                    }^n                    if (c < ' ') {^n                        if (c === '\n' |||| c === '\r') {^n                            break;^n                        }^n                        warn_at('control_a',^n                            line, character + pos, source_row.slice(0, pos));^n                    } else if (c === xquote) {^n                        warn_at('bad_html', line, character + pos);^n                    } else if (c === '<') {^n                        if (option.safe && xmode === 'html') {^n                            warn_at('adsafe_a', line, character + pos, c);^n                        } else if (source_row.charAt(pos + 1) === '/' && (xmode |||| option.safe)) {^n                            warn_at('expected_a_b', line, character,^n                                '<\\/', '</');^n                        } else if (source_row.charAt(pos + 1) === '!' && (xmode |||| option.safe)) {^n                            warn_at('unexpected_a', line, character, '<!');^n                        }^n                    } else if (c === '\\') {^n                        if (xmode === 'html') {^n                            if (option.safe) {^n                                warn_at('adsafe_a', line, character + pos, c);^n                            }^n                        } else if (xmode === 'styleproperty') {^n                            pos += 1;^n                            character += 1;^n                            c = source_row.charAt(pos);^n                            if (c !== x) {^n                                warn_at('unexpected_a', line, character, '\\');^n                            }^n                        } else {^n                            pos += 1;^n                            character += 1;^n                            c = source_row.charAt(pos);^n                            switch (c) {^n                                case '':^n                                    if (!option.es5) {^n                                        warn_at('es5', line, character);^n                                    }^n                                    next_line();^n                                    pos = -1;^n                                    break;^n                                case xquote:^n                                    warn_at('bad_html', line, character + pos);^n                                    break;^n                                case '\'':^n                                    if (json_mode) {^n                                        warn_at('unexpected_a', line, character, '\\\'');^n                                    }^n                                    break;^n                                case 'u':^n                                    hex(4);^n                                    break;^n                                case 'v':^n                                    if (json_mode) {^n                                        warn_at('unexpected_a', line, character, '\\v');^n                                    }^n                                    c = '\v';^n                                    break;^n                                case 'x':^n                                    if (json_mode) {^n                                        warn_at('unexpected_a', line, character, '\\x');^n                                    }^n                                    hex(2);^n                                    break;^n                                default:^n                                    c = descapes[c];^n                                    if (typeof c !== 'string') {^n                                        warn_at('unexpected_a', line, character, '\\');^n                                    }^n                            }^n                        }^n                    }^n                    r += c;^n                    character += 1;^n                    pos += 1;^n                }^n            }^n^n            function number(snippet) {^n                var digit;^n                if (xmode !== 'style' && xmode !== 'styleproperty' &&^n                    source_row.charAt(0).isAlpha()) {^n                    warn_at('expected_space_a_b',^n                        line, character, c, source_row.charAt(0));^n                }^n                if (c === '0') {^n                    digit = snippet.charAt(1);^n                    if (digit.isDigit()) {^n                        if (token.id !== '.' && xmode !== 'styleproperty') {^n                            warn_at('unexpected_a', line, character, snippet);^n                        }^n                    } else if (json_mode && (digit === 'x' |||| digit === 'X')) {^n                        warn_at('unexpected_a', line, character, '0x');^n                    }^n                }^n                if (snippet.slice(snippet.length - 1) === '.') {^n                    warn_at('trailing_decimal_a', line, character, snippet);^n                }^n                if (xmode !== 'style') {^n                    digit = +snippet;^n                    if (!isFinite(digit)) {^n                        warn_at('bad_number', line, character, snippet);^n                    }^n                    snippet = digit;^n                }^n                return it('(number)', snippet);^n            }^n^n            function comment(snippet) {^n                if (comments_off |||| src |||| (xmode && xmode !== 'script' &&^n                    xmode !== 'style' && xmode !== 'styleproperty')) {^n                    warn_at('unexpected_comment', line, character);^n                } else if (xmode === 'script' && /<\//i.test(source_row)) {^n                    warn_at('unexpected_a', line, character, '<\/');^n                } else if (option.safe && ax.test(snippet)) {^n                    warn_at('dangerous_comment', line, character);^n                }^n            }^n^n            function regexp() {^n                var b,^n                    bit,^n                    captures = 0,^n                    depth = 0,^n                    flag,^n                    high,^n                    length = 0,^n                    low,^n                    quote;^n                for (;;) {^n                    b = true;^n                    c = source_row.charAt(length);^n                    length += 1;^n                    switch (c) {^n                        case '':^n                            stop_at('unclosed_regexp', line, from);^n                            return;^n                        case '/':^n                            if (depth > 0) {^n                                warn_at('unescaped_a',^n                                    line, from + length, '/');^n                            }^n                            c = source_row.slice(0, length - 1);^n                            flag = Object.create(regexp_flag);^n                            while (flag[source_row.charAt(length)] === true) {^n                                flag[source_row.charAt(length)] = false;^n                                length += 1;^n                            }^n                            if (source_row.charAt(length).isAlpha()) {^n                                stop_at('unexpected_a',^n                                    line, from, source_row.charAt(length));^n                            }^n                            character += length;^n                            source_row = source_row.slice(length);^n                            quote = source_row.charAt(0);^n                            if (quote === '/' |||| quote === '*') {^n                                stop_at('confusing_regexp',^n                                    line, from);^n                            }^n                            return it('(regexp)', c);^n                        case '\\':^n                            c = source_row.charAt(length);^n                            if (c < ' ') {^n                                warn_at('control_a',^n                                    line, from + length, String(c));^n                            } else if (c === '<') {^n                                warn_at(^n                                    bundle.unexpected_a,^n                                    line,^n                                    from + length,^n                                    '\\'^n                                );^n                            }^n                            length += 1;^n                            break;^n                        case '(':^n                            depth += 1;^n                            b = false;^n                            if (source_row.charAt(length) === '?') {^n                                length += 1;^n                                switch (source_row.charAt(length)) {^n                                    case ':':^n                                    case '=':^n                                    case '!':^n                                        length += 1;^n                                        break;^n                                    default:^n                                        warn_at(^n                                            bundle.expected_a_b,^n                                            line,^n                                            from + length,^n                                            ':',^n                                            source_row.charAt(length)^n                                        );^n                                }^n                            } else {^n                                captures += 1;^n                            }^n                            break;^n                        case '||':^n                            b = false;^n                            break;^n                        case ')':^n                            if (depth === 0) {^n                                warn_at('unescaped_a',^n                                    line, from + length, ')');^n                            } else {^n                                depth -= 1;^n                            }^n                            break;^n                        case ' ':^n                            pos = 1;^n                            while (source_row.charAt(length) === ' ') {^n                                length += 1;^n                                pos += 1;^n                            }^n                            if (pos > 1) {^n                                warn_at('use_braces',^n                                    line, from + length, pos);^n                            }^n                            break;^n                        case '[':^n                            c = source_row.charAt(length);^n                            if (c === '^^') {^n                                length += 1;^n                                if (!option.regexp) {^n                                    warn_at('insecure_a',^n                                        line, from + length, c);^n                                } else if (source_row.charAt(length) === ']') {^n                                    stop_at('unescaped_a',^n                                        line, from + length, '^^');^n                                }^n                            }^n                            bit = false;^n                            if (c === ']') {^n                                warn_at('empty_class', line,^n                                    from + length - 1);^n                                bit = true;^n                            }^n                            klass: do {^n                                c = source_row.charAt(length);^n                                length += 1;^n                                switch (c) {^n                                    case '[':^n                                    case '^^':^n                                        warn_at('unescaped_a',^n                                            line, from + length, c);^n                                        bit = true;^n                                        break;^n                                    case '-':^n                                        if (bit) {^n                                            bit = false;^n                                        } else {^n                                            warn_at('unescaped_a',^n                                                line, from + length, '-');^n                                            bit = true;^n                                        }^n                                        break;^n                                    case ']':^n                                        if (!bit) {^n                                            warn_at('unescaped_a',^n                                                line, from + length - 1, '-');^n                                        }^n                                        break klass;^n                                    case '\\':^n                                        c = source_row.charAt(length);^n                                        if (c < ' ') {^n                                            warn_at(^n                                                bundle.control_a,^n                                                line,^n                                                from + length,^n                                                String(c)^n                                            );^n                                        } else if (c === '<') {^n                                            warn_at(^n                                                bundle.unexpected_a,^n                                                line,^n                                                from + length,^n                                                '\\'^n                                            );^n                                        }^n                                        length += 1;^n                                        bit = true;^n                                        break;^n                                    case '/':^n                                        warn_at('unescaped_a',^n                                            line, from + length - 1, '/');^n                                        bit = true;^n                                        break;^n                                    case '<':^n                                        if (xmode === 'script') {^n                                            c = source_row.charAt(length);^n                                            if (c === '!' |||| c === '/') {^n                                                warn_at(^n                                                    bundle.html_confusion_a,^n                                                    line,^n                                                    from + length,^n                                                    c^n                                                );^n                                            }^n                                        }^n                                        bit = true;^n                                        break;^n                                    default:^n                                        bit = true;^n                                }^n                            } while (c);^n                            break;^n                        case '.':^n                            if (!option.regexp) {^n                                warn_at('insecure_a', line,^n                                    from + length, c);^n                            }^n                            break;^n                        case ']':^n                        case '?':^n                        case '{':^n                        case '}':^n                        case '+':^n                        case '*':^n                            warn_at('unescaped_a', line,^n                                from + length, c);^n                            break;^n                        case '<':^n                            if (xmode === 'script') {^n                                c = source_row.charAt(length);^n                                if (c === '!' |||| c === '/') {^n                                    warn_at(^n                                        bundle.html_confusion_a,^n                                        line,^n                                        from + length,^n                                        c^n                                    );^n                                }^n                            }^n                            break;^n                    }^n                    if (b) {^n                        switch (source_row.charAt(length)) {^n                            case '?':^n                            case '+':^n                            case '*':^n                                length += 1;^n                                if (source_row.charAt(length) === '?') {^n                                    length += 1;^n                                }^n                                break;^n                            case '{':^n                                length += 1;^n                                c = source_row.charAt(length);^n                                if (c < '0' |||| c > '9') {^n                                    warn_at(^n                                        bundle.expected_number_a,^n                                        line,^n                                        from + length,^n                                        c^n                                    );^n                                }^n                                length += 1;^n                                low = +c;^n                                for (;;) {^n                                    c = source_row.charAt(length);^n                                    if (c < '0' |||| c > '9') {^n                                        break;^n                                    }^n                                    length += 1;^n                                    low = +c + (low * 10);^n                                }^n                                high = low;^n                                if (c === ',') {^n                                    length += 1;^n                                    high = Infinity;^n                                    c = source_row.charAt(length);^n                                    if (c >= '0' && c <= '9') {^n                                        length += 1;^n                                        high = +c;^n                                        for (;;) {^n                                            c = source_row.charAt(length);^n                                            if (c < '0' |||| c > '9') {^n                                                break;^n                                            }^n                                            length += 1;^n                                            high = +c + (high * 10);^n                                        }^n                                    }^n                                }^n                                if (source_row.charAt(length) !== '}') {^n                                    warn_at(^n                                        bundle.expected_a_b,^n                                        line,^n                                        from + length,^n                                        '}',^n                                        c^n                                    );^n                                } else {^n                                    length += 1;^n                                }^n                                if (source_row.charAt(length) === '?') {^n                                    length += 1;^n                                }^n                                if (low > high) {^n                                    warn_at(^n                                        bundle.not_greater,^n                                        line,^n                                        from + length,^n                                        low,^n                                        high^n                                    );^n                                }^n                                break;^n                        }^n                    }^n                }^n                c = source_row.slice(0, length - 1);^n                character += length;^n                source_row = source_row.slice(length);^n                return it('(regexp)', c);^n            }^n^n// Public lex methods^n^n            return {^n                init: function (source) {^n                    if (typeof source === 'string') {^n                        lines = source^n                            .replace(crlfx, '\n')^n                            .replace(crx, '\n')^n                            .split('\n');^n                    } else {^n                        lines = source;^n                    }^n                    line = 0;^n                    next_line();^n                    from = 1;^n                },^n^n                range: function (begin, end) {^n                    var c, value = '';^n                    from = character;^n                    if (source_row.charAt(0) !== begin) {^n                        stop_at('expected_a_b', line, character, begin,^n                            source_row.charAt(0));^n                    }^n                    for (;;) {^n                        source_row = source_row.slice(1);^n                        character += 1;^n                        c = source_row.charAt(0);^n                        switch (c) {^n                            case '':^n                                stop_at('missing_a', line, character, c);^n                                break;^n                            case end:^n                                source_row = source_row.slice(1);^n                                character += 1;^n                                return it('(range)', value);^n                            case xquote:^n                            case '\\':^n                                warn_at('unexpected_a', line, character, c);^n                                break;^n                        }^n                        value += c;^n                    }^n                },^n^n// token -- this is called by advance to get the next token.^n^n                token: function () {^n                    var c, i, snippet;^n^n                    for (;;) {^n                        while (!source_row) {^n                            if (!next_line()) {^n                                return it('(end)');^n                            }^n                        }^n                        while (xmode === 'outer') {^n                            i = source_row.search(ox);^n                            if (i === 0) {^n                                break;^n                            } else if (i > 0) {^n                                character += 1;^n                                source_row = source_row.slice(i);^n                                break;^n                            } else {^n                                if (!next_line()) {^n                                    return it('(end)', '');^n                                }^n                            }^n                        }^n                        snippet = match(rx[xmode] |||| tx);^n                        if (!snippet) {^n                            snippet = '';^n                            c = '';^n                            while (source_row && source_row < '!') {^n                                source_row = source_row.slice(1);^n                            }^n                            if (source_row) {^n                                if (xmode === 'html') {^n                                    return it('(error)', source_row.charAt(0));^n                                } else {^n                                    stop_at('unexpected_a',^n                                        line, character, source_row.charAt(0));^n                                }^n                            }^n                        } else {^n^n// identifier^n^n                            c = snippet.charAt(0);^n                            if (c.isAlpha() |||| c === '_' |||| c === '$') {^n                                return it('(identifier)', snippet);^n                            }^n^n// number^n^n                            if (c.isDigit()) {^n                                return number(snippet);^n                            }^n                            switch (snippet) {^n^n// string^n^n                                case '"':^n                                case "'":^n                                    return string(snippet);^n^n// // comment^n^n                                case '//':^n                                    comment(source_row);^n                                    source_row = '';^n                                    break;^n^n// /* comment^n^n                                case '/*':^n                                    for (;;) {^n                                        i = source_row.search(lx);^n                                        if (i >= 0) {^n                                            break;^n                                        }^n                                        comment(source_row);^n                                        if (!next_line()) {^n                                            stop_at('unclosed_comment', line, character);^n                                        }^n                                    }^n                                    comment(source_row.slice(0, i));^n                                    character += i + 2;^n                                    if (source_row.charAt(i) === '/') {^n                                        stop_at('nested_comment', line, character);^n                                    }^n                                    source_row = source_row.slice(i + 2);^n                                    break;^n^n                                case '':^n                                    break;^n// /^n                                case '/':^n                                    if (token.id === '/=') {^n                                        stop_at(^n                                            bundle.slash_equal,^n                                            line,^n                                            from^n                                        );^n                                    }^n                                    return prereg ? regexp() : it('(punctuator)', snippet);^n^n// punctuator^n^n                                case '<!--':^n                                    length = line;^n// c = character;^n                                    for (;;) {^n                                        i = source_row.indexOf('--');^n                                        if (i >= 0) {^n                                            break;^n                                        }^n                                        i = source_row.indexOf('<!');^n                                        if (i >= 0) {^n                                            stop_at('nested_comment',^n                                                line, character + i);^n                                        }^n                                        if (!next_line()) {^n                                            stop_at('unclosed_comment', length, c);^n                                        }^n                                    }^n                                    length = source_row.indexOf('<!');^n                                    if (length >= 0 && length < i) {^n                                        stop_at('nested_comment',^n                                            line, character + length);^n                                    }^n                                    character += i;^n                                    if (source_row.charAt(i + 2) !== '>') {^n                                        stop_at('expected_a', line, character, '-->');^n                                    }^n                                    character += 3;^n                                    source_row = source_row.slice(i + 3);^n                                    break;^n                                case '#':^n                                    if (xmode === 'html' |||| xmode === 'styleproperty') {^n                                        for (;;) {^n                                            c = source_row.charAt(0);^n                                            if ((c < '0' |||| c > '9') &&^n                                                (c < 'a' |||| c > 'f') &&^n                                                (c < 'A' |||| c > 'F')) {^n                                                break;^n                                            }^n                                            character += 1;^n                                            source_row = source_row.slice(1);^n                                            snippet += c;^n                                        }^n                                        if (snippet.length !== 4 && snippet.length !== 7) {^n                                            warn_at('bad_color_a', line,^n                                                from + length, snippet);^n                                        }^n                                        return it('(color)', snippet);^n                                    }^n                                    return it('(punctuator)', snippet);^n^n                                default:^n                                    if (xmode === 'outer' && c === '&') {^n                                        character += 1;^n                                        source_row = source_row.slice(1);^n                                        for (;;) {^n                                            c = source_row.charAt(0);^n                                            character += 1;^n                                            source_row = source_row.slice(1);^n                                            if (c === ';') {^n                                                break;^n                                            }^n                                            if (!((c >= '0' && c <= '9') ||||^n                                                (c >= 'a' && c <= 'z') ||||^n                                                c === '#')) {^n                                                stop_at('bad_entity', line, from + length,^n                                                    character);^n                                            }^n                                        }^n                                        break;^n                                    }^n                                    return it('(punctuator)', snippet);^n                            }^n                        }^n                    }^n                }^n            };^n        }());^n^n^n        function add_label(token, kind, name) {^n^n// Define the symbol in the current function in the current scope.^n^n            name = name |||| token.string;^n^n// Global variables cannot be created in the safe subset. If a global variable^n// already exists, do nothing. If it is predefined, define it.^n^n            if (funct === global_funct) {^n                if (option.safe) {^n                    warn('adsafe_a', token, name);^n                }^n                if (typeof global_funct[name] !== 'string') {^n                    token.writeable = typeof predefined[name] === 'boolean' ?^n                        predefined[name] : true;^n                    token.funct = funct;^n                    global_scope[name] = token;^n                }^n                if (kind === 'becoming') {^n                    kind = 'var';^n                }^n^n// Ordinary variables.^n^n            } else {^n^n// Warn if the variable already exists.^n^n                if (typeof funct[name] === 'string') {^n                    if (funct[name] === 'undef') {^n                        if (!option.undef) {^n                            warn('used_before_a', token, name);^n                        }^n                        kind = 'var';^n                    } else {^n                        warn('already_defined', token, name);^n                    }^n                } else {^n^n// Add the symbol to the current function.^n^n                    token.funct = funct;^n                    token.writeable = true;^n                    scope[name] = token;^n                }^n            }^n            funct[name] = kind;^n        }^n^n^n        function peek(distance) {^n^n// Peek ahead to a future token. The distance is how far ahead to look. The^n// default is the next token.^n^n            var found, slot = 0;^n^n            distance = distance |||| 0;^n            while (slot <= distance) {^n                found = lookahead[slot];^n                if (!found) {^n                    found = lookahead[slot] = lex.token();^n                }^n                slot += 1;^n            }^n            return found;^n        }^n^n^n        function advance(id, match) {^n^n// Produce the next token, also looking for programming errors.^n^n            if (indent) {^n^n// If indentation checking was requested, then inspect all of the line breakings.^n// The var statement is tricky because the names might be aligned or not. We^n// look at the first line break after the var to determine the programmer's^n// intention.^n^n                if (var_mode && next_token.line !== token.line) {^n                    if ((var_mode !== indent |||| !next_token.edge) &&^n                        next_token.from === indent.at -^n                            (next_token.edge ? option.indent : 0)) {^n                        var dent = indent;^n                        for (;;) {^n                            dent.at -= option.indent;^n                            if (dent === var_mode) {^n                                break;^n                            }^n                            dent = dent.was;^n                        }^n                        dent.open = false;^n                    }^n                    var_mode = null;^n                }^n                if (indent.open) {^n^n// If the token is an edge.^n^n                    if (next_token.edge) {^n                        if (next_token.edge === 'label') {^n                            expected_at(1);^n                        } else if (next_token.edge === 'case') {^n                            expected_at(indent.at - option.indent);^n                        } else if (indent.mode !== 'array' |||| next_token.line !== token.line) {^n                            expected_at(indent.at);^n                        }^n^n// If the token is not an edge, but is the first token on the line.^n^n                    } else if (next_token.line !== token.line) {^n                        if (next_token.from < indent.at + (indent.mode ===^n                            'expression' ? 0 : option.indent)) {^n                            expected_at(indent.at + option.indent);^n                        }^n                        indent.wrap = true;^n                    }^n                } else if (next_token.line !== token.line) {^n                    if (next_token.edge) {^n                        expected_at(indent.at);^n                    } else {^n                        indent.wrap = true;^n                        if (indent.mode === 'statement' |||| indent.mode === 'var') {^n                            expected_at(indent.at + option.indent);^n                        } else if (next_token.from < indent.at + (indent.mode ===^n                            'expression' ? 0 : option.indent)) {^n                            expected_at(indent.at + option.indent);^n                        }^n                    }^n                }^n            }^n^n            switch (token.id) {^n                case '(number)':^n                    if (next_token.id === '.') {^n                        warn('trailing_decimal_a');^n                    }^n                    break;^n                case '-':^n                    if (next_token.id === '-' |||| next_token.id === '--') {^n                        warn('confusing_a');^n                    }^n                    break;^n                case '+':^n                    if (next_token.id === '+' |||| next_token.id === '++') {^n                        warn('confusing_a');^n                    }^n                    break;^n            }^n            if (token.id === '(string)' |||| token.identifier) {^n                anonname = token.string;^n            }^n^n            if (id && next_token.id !== id) {^n                if (match) {^n                    warn('expected_a_b_from_c_d', next_token, id,^n                        match.id, match.line, artifact());^n                } else if (!next_token.identifier |||| next_token.string !== id) {^n                    warn('expected_a_b', next_token, id, artifact());^n                }^n            }^n            prev_token = token;^n            token = next_token;^n            next_token = lookahead.shift() |||| lex.token();^n        }^n^n^n        function advance_identifier(string) {^n            if (next_token.identifier && next_token.string === string) {^n                advance();^n            } else {^n                warn('expected_a_b', next_token, string, artifact());^n            }^n        }^n^n^n        function do_safe() {^n            if (option.adsafe) {^n                option.safe = true;^n            }^n            if (option.safe) {^n                option.browser =^n                    option['continue'] =^n                        option.css =^n                            option.debug =^n                                option.devel =^n                                    option.evil =^n                                        option.forin =^n                                            option.newcap =^n                                                option.nomen =^n                                                    option.on =^n                                                        option.rhino =^n                                                            option.sloppy =^n                                                                option.sub =^n                                                                    option.undef =^n                                                                        option.widget =^n                                                                            option.windows = false;^n^n^n                delete predefined.Array;^n                delete predefined.Date;^n                delete predefined.Function;^n                delete predefined.Object;^n                delete predefined['eval'];^n^n                add_to_predefined({^n                    ADSAFE: false,^n                    lib: false^n                });^n            }^n        }^n^n^n        function do_globals() {^n            var name, writeable;^n            for (;;) {^n                if (next_token.id !== '(string)' && !next_token.identifier) {^n                    return;^n                }^n                name = next_token.string;^n                advance();^n                writeable = false;^n                if (next_token.id === ':') {^n                    advance(':');^n                    switch (next_token.id) {^n                        case 'true':^n                            writeable = predefined[name] !== false;^n                            advance('true');^n                            break;^n                        case 'false':^n                            advance('false');^n                            break;^n                        default:^n                            stop('unexpected_a');^n                    }^n                }^n                predefined[name] = writeable;^n                if (next_token.id !== ',') {^n                    return;^n                }^n                advance(',');^n            }^n        }^n^n^n        function do_jslint() {^n            var name, value;^n            while (next_token.id === '(string)' |||| next_token.identifier) {^n                name = next_token.string;^n                advance();^n                if (next_token.id !== ':') {^n                    stop('expected_a_b', next_token, ':', artifact());^n                }^n                advance(':');^n                if (typeof jslint_limit[name] === 'number') {^n                    value = next_token.number;^n                    if (value > jslint_limit[name] |||| value <= 0 ||||^n                        Math.floor(value) !== value) {^n                        stop('expected_small_a');^n                    }^n                    option[name] = value;^n                } else {^n                    if (next_token.id === 'true') {^n                        option[name] = true;^n                    } else if (next_token.id === 'false') {^n                        option[name] = false;^n                    } else {^n                        stop('unexpected_a');^n                    }^n                    switch (name) {^n                        case 'adsafe':^n                            option.safe = true;^n                            do_safe();^n                            break;^n                        case 'safe':^n                            do_safe();^n                            break;^n                    }^n                }^n                advance();^n                if (next_token.id === ',') {^n                    advance(',');^n                }^n            }^n            assume();^n        }^n^n^n        function do_properties() {^n            var name, type;^n            option.properties = true;^n            if (!funct['(old_property_type)']) {^n                funct['(old_property_type)'] = property_type;^n                property_type = Object.create(property_type);^n            }^n            for (;;) {^n                if (next_token.id !== '(string)' && !next_token.identifier) {^n                    return;^n                }^n                name = next_token.string;^n                type = '';^n                advance();^n                if (next_token.id === ':') {^n                    advance(':');^n                    if (next_token.id === 'function') {^n                        advance('function');^n                        if (is_type[next_token.string] === true) {^n                            type = 'function ' + next_token.string;^n                            advance();^n                        } else {^n                            type = 'function';^n                        }^n                    } else {^n                        type = next_token.string;^n                        if (is_type[type] !== true) {^n                            warn('expected_type_a', next_token);^n                            type = '';^n                        }^n                        advance();^n                    }^n                }^n                property_type[name] = type;^n                if (next_token.id !== ',') {^n                    return;^n                }^n                advance(',');^n            }^n        }^n^n^n        directive = function directive() {^n            var command = this.id,^n                old_comments_off = comments_off,^n                old_indent = indent;^n            comments_off = true;^n            indent = null;^n            if (next_token.line === token.line && next_token.from === token.thru) {^n                warn('missing_space_a_b', next_token, artifact(token), artifact());^n            }^n            if (lookahead.length > 0) {^n                warn('unexpected_a', this);^n            }^n            switch (command) {^n                case '/*properties':^n                case '/*property':^n                case '/*members':^n                case '/*member':^n                    do_properties();^n                    break;^n                case '/*jslint':^n                    if (option.safe) {^n                        warn('adsafe_a', this);^n                    }^n                    do_jslint();^n                    break;^n                case '/*globals':^n                case '/*global':^n                    if (option.safe) {^n                        warn('adsafe_a', this);^n                    }^n                    do_globals();^n                    break;^n                default:^n                    stop('unexpected_a', this);^n            }^n            comments_off = old_comments_off;^n            advance('*/');^n            indent = old_indent;^n        };^n^n^n// Indentation intention^n^n        function edge(mode) {^n            next_token.edge = indent ? indent.open && (mode |||| 'edge') : '';^n        }^n^n^n        function step_in(mode) {^n            var open, was;^n            if (typeof mode === 'number') {^n                indent = {^n                    at: +mode,^n                    open: true,^n                    was: was^n                };^n            } else if (!indent) {^n                indent = {^n                    at: 1,^n                    mode: 'statement',^n                    open: true^n                };^n            } else {^n                was = indent;^n                open = mode === 'var' ||||^n                    (next_token.line !== token.line && mode !== 'statement');^n                indent = {^n                    at: (open |||| mode === 'control' ?^n                        was.at + option.indent : was.at) +^n                        (was.wrap ? option.indent : 0),^n                    mode: mode,^n                    open: open,^n                    was: was^n                };^n                if (mode === 'var' && open) {^n                    var_mode = indent;^n                }^n            }^n        }^n^n        function step_out(id, symbol) {^n            if (id) {^n                if (indent && indent.open) {^n                    indent.at -= option.indent;^n                    edge();^n                }^n                advance(id, symbol);^n            }^n            if (indent) {^n                indent = indent.was;^n            }^n        }^n^n// Functions for conformance of whitespace.^n^n        function one_space(left, right) {^n            left = left |||| token;^n            right = right |||| next_token;^n            if (right.id !== '(end)' && !option.white &&^n                (token.line !== right.line ||||^n                    token.thru + 1 !== right.from)) {^n                warn('expected_space_a_b', right, artifact(token), artifact(right));^n            }^n        }^n^n        function one_space_only(left, right) {^n            left = left |||| token;^n            right = right |||| next_token;^n            if (right.id !== '(end)' && (left.line !== right.line ||||^n                (!option.white && left.thru + 1 !== right.from))) {^n                warn('expected_space_a_b', right, artifact(left), artifact(right));^n            }^n        }^n^n        function no_space(left, right) {^n            left = left |||| token;^n            right = right |||| next_token;^n            if ((!option.white |||| xmode === 'styleproperty' |||| xmode === 'style') &&^n                left.thru !== right.from && left.line === right.line) {^n                warn('unexpected_space_a_b', right, artifact(left), artifact(right));^n            }^n        }^n^n        function no_space_only(left, right) {^n            left = left |||| token;^n            right = right |||| next_token;^n            if (right.id !== '(end)' && (left.line !== right.line ||||^n                (!option.white && left.thru !== right.from))) {^n                warn('unexpected_space_a_b', right, artifact(left), artifact(right));^n            }^n        }^n^n        function spaces(left, right) {^n            if (!option.white) {^n                left = left |||| token;^n                right = right |||| next_token;^n                if (left.thru === right.from && left.line === right.line) {^n                    warn('missing_space_a_b', right, artifact(left), artifact(right));^n                }^n            }^n        }^n^n        function comma() {^n            if (next_token.id !== ',') {^n                warn_at('expected_a_b', token.line, token.thru, ',', artifact());^n            } else {^n                if (!option.white) {^n                    no_space_only();^n                }^n                advance(',');^n                spaces();^n            }^n        }^n^n^n        function semicolon() {^n            if (next_token.id !== ';') {^n                warn_at('expected_a_b', token.line, token.thru, ';', artifact());^n            } else {^n                if (!option.white) {^n                    no_space_only();^n                }^n                advance(';');^n                if (semicolon_coda[next_token.id] !== true) {^n                    spaces();^n                }^n            }^n        }^n^n        function use_strict() {^n            if (next_token.string === 'use strict') {^n                if (strict_mode) {^n                    warn('unnecessary_use');^n                }^n                edge();^n                advance();^n                semicolon();^n                strict_mode = true;^n                option.newcap = false;^n                option.undef = false;^n                return true;^n            } else {^n                return false;^n            }^n        }^n^n^n        function are_similar(a, b) {^n            if (a === b) {^n                return true;^n            }^n            if (Array.isArray(a)) {^n                if (Array.isArray(b) && a.length === b.length) {^n                    var i;^n                    for (i = 0; i < a.length; i += 1) {^n                        if (!are_similar(a[i], b[i])) {^n                            return false;^n                        }^n                    }^n                    return true;^n                }^n                return false;^n            }^n            if (Array.isArray(b)) {^n                return false;^n            }^n            if (a.id === '(number)' && b.id === '(number)') {^n                return a.number === b.number;^n            }^n            if (a.arity === b.arity && a.string === b.string) {^n                switch (a.arity) {^n                    case 'prefix':^n                    case 'suffix':^n                    case undefined:^n                        return a.id === b.id && are_similar(a.first, b.first);^n                    case 'infix':^n                        return are_similar(a.first, b.first) &&^n                            are_similar(a.second, b.second);^n                    case 'ternary':^n                        return are_similar(a.first, b.first) &&^n                            are_similar(a.second, b.second) &&^n                            are_similar(a.third, b.third);^n                    case 'function':^n                    case 'regexp':^n                        return false;^n                    default:^n                        return true;^n                }^n            } else {^n                if (a.id === '.' && b.id === '[' && b.arity === 'infix') {^n                    return a.second.string === b.second.string && b.second.id === '(string)';^n                } else if (a.id === '[' && a.arity === 'infix' && b.id === '.') {^n                    return a.second.string === b.second.string && a.second.id === '(string)';^n                }^n            }^n            return false;^n        }^n^n^n// This is the heart of JSLINT, the Pratt parser. In addition to parsing, it^n// is looking for ad hoc lint patterns. We add .fud to Pratt's model, which is^n// like .nud except that it is only used on the first token of a statement.^n// Having .fud makes it much easier to define statement-oriented languages like^n// JavaScript. I retained Pratt's nomenclature.^n^n// .nud Null denotation^n// .fud First null denotation^n// .led Left denotation^n// lbp Left binding power^n// rbp Right binding power^n^n// They are elements of the parsing method called Top Down Operator Precedence.^n^n        function expression(rbp, initial) {^n^n// rbp is the right binding power.^n// initial indicates that this is the first expression of a statement.^n^n            var left;^n            if (next_token.id === '(end)') {^n                stop('unexpected_a', token, next_token.id);^n            }^n            advance();^n            if (option.safe && scope[token.string] &&^n                scope[token.string] === global_scope[token.string] &&^n                (next_token.id !== '(' && next_token.id !== '.')) {^n                warn('adsafe_a', token);^n            }^n            if (initial) {^n                anonname = 'anonymous';^n                funct['(verb)'] = token.string;^n            }^n            if (initial === true && token.fud) {^n                left = token.fud();^n            } else {^n                if (token.nud) {^n                    left = token.nud();^n                } else {^n                    if (next_token.id === '(number)' && token.id === '.') {^n                        warn('leading_decimal_a', token, artifact());^n                        advance();^n                        return token;^n                    } else {^n                        stop('expected_identifier_a', token, token.id);^n                    }^n                }^n                while (rbp < next_token.lbp) {^n                    advance();^n                    if (token.led) {^n                        left = token.led(left);^n                    } else {^n                        stop('expected_operator_a', token, token.id);^n                    }^n                }^n            }^n            return left;^n        }^n^n^n// Functional constructors for making the symbols that will be inherited by^n// tokens.^n^n        function symbol(s, p) {^n            var x = syntax[s];^n            if (!x |||| typeof x !== 'object') {^n                syntax[s] = x = {^n                    id: s,^n                    lbp: p |||| 0,^n                    string: s^n                };^n            }^n            return x;^n        }^n^n        function postscript(x) {^n            x.postscript = true;^n            return x;^n        }^n^n        function ultimate(s) {^n            var x = symbol(s, 0);^n            x.from = 1;^n            x.thru = 1;^n            x.line = 0;^n            x.edge = 'edge';^n            s.string = s;^n            return postscript(x);^n        }^n^n^n        function stmt(s, f) {^n            var x = symbol(s);^n            x.identifier = x.reserved = true;^n            x.fud = f;^n            return x;^n        }^n^n        function labeled_stmt(s, f) {^n            var x = stmt(s, f);^n            x.labeled = true;^n        }^n^n        function disrupt_stmt(s, f) {^n            var x = stmt(s, f);^n            x.disrupt = true;^n        }^n^n^n        function reserve_name(x) {^n            var c = x.id.charAt(0);^n            if ((c >= 'a' && c <= 'z') |||| (c >= 'A' && c <= 'Z')) {^n                x.identifier = x.reserved = true;^n            }^n            return x;^n        }^n^n^n        function prefix(s, f, type) {^n            var x = symbol(s, 150);^n            reserve_name(x);^n            x.nud = (typeof f === 'function') ? f : function () {^n                if (s === 'typeof') {^n                    one_space();^n                } else {^n                    no_space_only();^n                }^n                this.first = expression(150);^n                this.arity = 'prefix';^n                if (this.id === '++' |||| this.id === '--') {^n                    if (!option.plusplus) {^n                        warn('unexpected_a', this);^n                    } else if ((!this.first.identifier |||| this.first.reserved) &&^n                        this.first.id !== '.' && this.first.id !== '[') {^n                        warn('bad_operand', this);^n                    }^n                }^n                this.type = type;^n                return this;^n            };^n            return x;^n        }^n^n^n        function type(s, t, nud) {^n            var x = symbol(s);^n            x.arity = x.type = t;^n            if (nud) {^n                x.nud = nud;^n            }^n            return x;^n        }^n^n^n        function reserve(s, f) {^n            var x = symbol(s);^n            x.identifier = x.reserved = true;^n            if (typeof f === 'function') {^n                x.nud = f;^n            }^n            return x;^n        }^n^n^n        function constant(name, type) {^n            var x = reserve(name);^n            x.type = type;^n            x.string = name;^n            x.nud = return_this;^n            return x;^n        }^n^n^n        function reservevar(s, v) {^n            return reserve(s, function () {^n                if (typeof v === 'function') {^n                    v(this);^n                }^n                return this;^n            });^n        }^n^n^n        function infix(s, p, f, type, w) {^n            var x = symbol(s, p);^n            reserve_name(x);^n            x.led = function (left) {^n                this.arity = 'infix';^n                if (!w) {^n                    spaces(prev_token, token);^n                    spaces();^n                }^n                if (!option.bitwise && this.bitwise) {^n                    warn('unexpected_a', this);^n                }^n                if (typeof f === 'function') {^n                    return f(left, this);^n                } else {^n                    this.first = left;^n                    this.second = expression(p);^n                    return this;^n                }^n            };^n            if (type) {^n                x.type = type;^n            }^n            return x;^n        }^n^n        function expected_relation(node, message) {^n            if (node.assign) {^n                warn(message |||| bundle.conditional_assignment, node);^n            }^n            return node;^n        }^n^n        function expected_condition(node, message) {^n            switch (node.id) {^n                case '[':^n                case '-':^n                    if (node.arity !== 'infix') {^n                        warn(message |||| bundle.weird_condition, node);^n                    }^n                    break;^n                case 'false':^n                case 'function':^n                case 'Infinity':^n                case 'NaN':^n                case 'null':^n                case 'true':^n                case 'undefined':^n                case 'void':^n                case '(number)':^n                case '(regexp)':^n                case '(string)':^n                case '{':^n                    warn(message |||| bundle.weird_condition, node);^n                    break;^n                case '(':^n                    if (node.first.id === '.' && numbery[node.first.second.string] === true) {^n                        warn(message |||| bundle.weird_condition, node);^n                    }^n                    break;^n            }^n            return node;^n        }^n^n        function check_relation(node) {^n            switch (node.arity) {^n                case 'prefix':^n                    switch (node.id) {^n                        case '{':^n                        case '[':^n                            warn('unexpected_a', node);^n                            break;^n                        case '!':^n                            warn('confusing_a', node);^n                            break;^n                    }^n                    break;^n                case 'function':^n                case 'regexp':^n                    warn('unexpected_a', node);^n                    break;^n                default:^n                    if (node.id === 'NaN') {^n                        warn('isnan', node);^n                    }^n            }^n            return node;^n        }^n^n^n        function relation(s, eqeq) {^n            return infix(s, 100, function (left, that) {^n                check_relation(left);^n                if (eqeq && !option.eqeq) {^n                    warn('expected_a_b', that, eqeq, that.id);^n                }^n                var right = expression(100);^n                if (are_similar(left, right) ||||^n                    ((left.id === '(string)' |||| left.id === '(number)') &&^n                        (right.id === '(string)' |||| right.id === '(number)'))) {^n                    warn('weird_relation', that);^n                }^n                that.first = left;^n                that.second = check_relation(right);^n                return that;^n            }, 'boolean');^n        }^n^n^n        function assignop(s, op) {^n            var x = infix(s, 20, function (left, that) {^n                var l;^n                that.first = left;^n                if (left.identifier) {^n                    if (scope[left.string]) {^n                        if (scope[left.string].writeable === false) {^n                            warn('read_only', left);^n                        }^n                    } else {^n                        stop('read_only');^n                    }^n                } else if (option.safe) {^n                    l = left;^n                    do {^n                        if (typeof predefined[l.string] === 'boolean') {^n                            warn('adsafe_a', l);^n                        }^n                        l = l.first;^n                    } while (l);^n                }^n                if (left === syntax['function']) {^n                    warn('identifier_function', token);^n                }^n                if (left.id === '.' |||| left.id === '[') {^n                    if (!left.first |||| left.first.string === 'arguments') {^n                        warn('bad_assignment', that);^n                    }^n                } else if (left.identifier && !left.reserved) {^n                    if (funct[left.string] === 'exception') {^n                        warn('assign_exception', left);^n                    }^n                }^n                that.second = expression(19);^n                if (that.id === '=' && are_similar(that.first, that.second)) {^n                    warn('weird_assignment', that);^n                }^n                return that;^n            });^n            x.assign = true;^n            if (op) {^n                if (syntax[op].type) {^n                    x.type = syntax[op].type;^n                }^n                if (syntax[op].bitwise) {^n                    x.bitwise = true;^n                }^n            }^n            return x;^n        }^n^n^n        function bitwise(s, p) {^n            var x = infix(s, p, 'number');^n            x.bitwise = true;^n            return x;^n        }^n^n^n        function suffix(s) {^n            var x = symbol(s, 150);^n            x.led = function (left) {^n                no_space_only(prev_token, token);^n                if (!option.plusplus) {^n                    warn('unexpected_a', this);^n                } else if ((!left.identifier |||| left.reserved) &&^n                    left.id !== '.' && left.id !== '[') {^n                    warn('bad_operand', this);^n                }^n                this.first = left;^n                this.arity = 'suffix';^n                return this;^n            };^n            return x;^n        }^n^n^n        function optional_identifier() {^n            if (next_token.identifier) {^n                advance();^n                if (option.safe && banned[token.string]) {^n                    warn('adsafe_a', token);^n                } else if (token.reserved && !option.es5) {^n                    warn('expected_identifier_a_reserved', token);^n                }^n                return token.string;^n            }^n        }^n^n^n        function identifier() {^n            var i = optional_identifier();^n            if (!i) {^n                stop(token.id === 'function' && next_token.id === '(' ?^n                    'name_function' : 'expected_identifier_a');^n            }^n            return i;^n        }^n^n^n        function statement() {^n^n            var label, old_scope = scope, the_statement;^n^n// We don't like the empty statement.^n^n            if (next_token.id === ';') {^n                warn('unexpected_a');^n                semicolon();^n                return;^n            }^n^n// Is this a labeled statement?^n^n            if (next_token.identifier && !next_token.reserved && peek(0).id === ':') {^n                edge('label');^n                label = next_token;^n                advance();^n                advance(':');^n                scope = Object.create(old_scope);^n                add_label(label, 'label');^n                if (next_token.labeled !== true) {^n                    warn('label_a_b', next_token, label.string, artifact());^n                } else if (jx.test(label.string + ':')) {^n                    warn('url', label);^n                } else if (funct === global_funct) {^n                    stop('unexpected_a', token);^n                }^n                next_token.label = label;^n            }^n^n// Parse the statement.^n^n            edge();^n            step_in('statement');^n            the_statement = expression(0, true);^n            if (the_statement) {^n^n// Look for the final semicolon.^n^n                if (the_statement.arity === 'statement') {^n                    if (the_statement.id === 'switch' ||||^n                        (the_statement.block && the_statement.id !== 'do')) {^n                        spaces();^n                    } else {^n                        semicolon();^n                    }^n                } else {^n^n// If this is an expression statement, determine if it is acceptable.^n// We do not like^n// new Blah();^n// statments. If it is to be used at all, new should only be used to make^n// objects, not side effects. The expression statements we do like do^n// assignment or invocation or delete.^n^n                    if (the_statement.id === '(') {^n                        if (the_statement.first.id === 'new') {^n                            warn('bad_new');^n                        }^n                    } else if (!the_statement.assign &&^n                        the_statement.id !== 'delete' &&^n                        the_statement.id !== '++' &&^n                        the_statement.id !== '--') {^n                        warn('assignment_function_expression', token);^n                    }^n                    semicolon();^n                }^n            }^n            step_out();^n            scope = old_scope;^n            return the_statement;^n        }^n^n^n        function statements() {^n            var array = [], disruptor, the_statement;^n^n// A disrupt statement may not be followed by any other statement.^n// If the last statement is disrupt, then the sequence is disrupt.^n^n            while (next_token.postscript !== true) {^n                if (next_token.id === ';') {^n                    warn('unexpected_a', next_token);^n                    semicolon();^n                } else {^n                    if (next_token.string === 'use strict') {^n                        if ((!node_js && xmode !== 'script') |||| funct !== global_funct |||| array.length > 0) {^n                            warn('function_strict');^n                        }^n                        use_strict();^n                    }^n                    if (disruptor) {^n                        warn('unreachable_a_b', next_token, next_token.string,^n                            disruptor.string);^n                        disruptor = null;^n                    }^n                    the_statement = statement();^n                    if (the_statement) {^n                        array.push(the_statement);^n                        if (the_statement.disrupt) {^n                            disruptor = the_statement;^n                            array.disrupt = true;^n                        }^n                    }^n                }^n            }^n            return array;^n        }^n^n^n        function block(ordinary) {^n^n// array block is array sequence of statements wrapped in braces.^n// ordinary is false for function bodies and try blocks.^n// ordinary is true for if statements, while, etc.^n^n            var array,^n                curly = next_token,^n                old_in_block = in_block,^n                old_scope = scope,^n                old_strict_mode = strict_mode;^n^n            in_block = ordinary;^n            scope = Object.create(scope);^n            spaces();^n            if (next_token.id === '{') {^n                advance('{');^n                step_in();^n                if (!ordinary && !use_strict() && !old_strict_mode &&^n                    !option.sloppy && funct['(context)'] === global_funct) {^n                    warn('missing_use_strict');^n                }^n                array = statements();^n                strict_mode = old_strict_mode;^n                step_out('}', curly);^n            } else if (!ordinary) {^n                stop('expected_a_b', next_token, '{', artifact());^n            } else {^n                warn('expected_a_b', next_token, '{', artifact());^n                array = [statement()];^n                array.disrupt = array[0].disrupt;^n            }^n            funct['(verb)'] = null;^n            scope = old_scope;^n            in_block = old_in_block;^n            if (ordinary && array.length === 0) {^n                warn('empty_block');^n            }^n            return array;^n        }^n^n^n        function tally_property(name) {^n            if (option.properties && typeof property_type[name] !== 'string') {^n                warn('unexpected_property_a', token, name);^n            }^n            if (typeof member[name] === 'number') {^n                member[name] += 1;^n            } else {^n                member[name] = 1;^n            }^n        }^n^n^n// ECMAScript parser^n^n        syntax['(identifier)'] = {^n            id: '(identifier)',^n            lbp: 0,^n            identifier: true,^n            nud: function () {^n                var name = this.string,^n                    variable = scope[name],^n                    site,^n                    writeable;^n^n// If the variable is not in scope, then we may have an undeclared variable.^n// Check the predefined list. If it was predefined, create the global^n// variable.^n^n                if (typeof variable !== 'object') {^n                    writeable = predefined[name];^n                    if (typeof writeable === 'boolean') {^n                        global_scope[name] = variable = {^n                            string: name,^n                            writeable: writeable,^n                            funct: global_funct^n                        };^n                        global_funct[name] = 'var';^n^n// But if the variable is not in scope, and is not predefined, and if we are not^n// in the global scope, then we have an undefined variable error.^n^n                    } else {^n                        if (!option.undef) {^n                            warn('used_before_a', token);^n                        }^n                        scope[name] = variable = {^n                            string: name,^n                            writeable: true,^n                            funct: funct^n                        };^n                        funct[name] = 'undef';^n                    }^n^n                }^n                site = variable.funct;^n^n// The name is in scope and defined in the current function.^n^n                if (funct === site) {^n^n// Change 'unused' to 'var', and reject labels.^n^n                    switch (funct[name]) {^n                        case 'becoming':^n                            warn('unexpected_a', token);^n                            funct[name] = 'var';^n                            break;^n                        case 'unused':^n                            funct[name] = 'var';^n                            break;^n                        case 'unparam':^n                            funct[name] = 'parameter';^n                            break;^n                        case 'unction':^n                            funct[name] = 'function';^n                            break;^n                        case 'label':^n                            warn('a_label', token, name);^n                            break;^n                    }^n^n// If the name is already defined in the current^n// function, but not as outer, then there is a scope error.^n^n                } else {^n                    switch (funct[name]) {^n                        case 'closure':^n                        case 'function':^n                        case 'var':^n                        case 'unused':^n                            warn('a_scope', token, name);^n                            break;^n                        case 'label':^n                            warn('a_label', token, name);^n                            break;^n                        case 'outer':^n                        case 'global':^n                            break;^n                        default:^n^n// If the name is defined in an outer function, make an outer entry, and if^n// it was unused, make it var.^n^n                            switch (site[name]) {^n                                case 'becoming':^n                                case 'closure':^n                                case 'function':^n                                case 'parameter':^n                                case 'unction':^n                                case 'unused':^n                                case 'var':^n                                    site[name] = 'closure';^n                                    funct[name] = site === global_funct ? 'global' : 'outer';^n                                    break;^n                                case 'unparam':^n                                    site[name] = 'parameter';^n                                    funct[name] = 'outer';^n                                    break;^n                                case 'undef':^n                                    funct[name] = 'undef';^n                                    break;^n                                case 'label':^n                                    warn('a_label', token, name);^n                                    break;^n                            }^n                    }^n                }^n                return this;^n            },^n            led: function () {^n                stop('expected_operator_a');^n            }^n        };^n^n// Build the syntax table by declaring the syntactic elements.^n^n        type('(array)', 'array');^n        type('(color)', 'color');^n        type('(function)', 'function');^n        type('(number)', 'number', return_this);^n        type('(object)', 'object');^n        type('(string)', 'string', return_this);^n        type('(boolean)', 'boolean', return_this);^n        type('(range)', 'range');^n        type('(regexp)', 'regexp', return_this);^n^n        ultimate('(begin)');^n        ultimate('(end)');^n        ultimate('(error)');^n        postscript(symbol('</'));^n        symbol('<!');^n        symbol('<!--');^n        symbol('-->');^n        postscript(symbol('}'));^n        symbol(')');^n        symbol(']');^n        postscript(symbol('"'));^n        postscript(symbol('\''));^n        symbol(';');^n        symbol(':');^n        symbol(',');^n        symbol('#');^n        symbol('|@');^n        symbol('*/');^n        postscript(reserve('case'));^n        reserve('catch');^n        postscript(reserve('default'));^n        reserve('else');^n        reserve('finally');^n^n        reservevar('arguments', function (x) {^n            if (strict_mode && funct === global_funct) {^n                warn('strict', x);^n            } else if (option.safe) {^n                warn('adsafe_a', x);^n            }^n        });^n        reservevar('eval', function (x) {^n            if (option.safe) {^n                warn('adsafe_a', x);^n            }^n        });^n        constant('false', 'boolean');^n        constant('Infinity', 'number');^n        constant('NaN', 'number');^n        constant('null', '');^n        reservevar('this', function (x) {^n            if (option.safe) {^n                warn('adsafe_a', x);^n            } else if (strict_mode && funct['(token)'].arity === 'statement' &&^n                funct['(name)'].charAt(0) > 'Z') {^n                warn('strict', x);^n            }^n        });^n        constant('true', 'boolean');^n        constant('undefined', '');^n^n        infix('?', 30, function (left, that) {^n            that.first = expected_condition(expected_relation(left));^n            that.second = expression(0);^n            spaces();^n            var colon = next_token;^n            advance(':');^n            spaces();^n            that.third = expression(10);^n            that.arity = 'ternary';^n            if (are_similar(that.second, that.third)) {^n                warn('weird_ternary', colon);^n            } else if (are_similar(that.first, that.second)) {^n                warn('use_or', that);^n            }^n            return that;^n        });^n^n        infix('||||', 40, function (left, that) {^n            function paren_check(that) {^n                if (that.id === '&&' && !that.paren) {^n                    warn('and', that);^n                }^n                return that;^n            }^n^n            that.first = paren_check(expected_condition(expected_relation(left)));^n            that.second = paren_check(expected_relation(expression(40)));^n            if (are_similar(that.first, that.second)) {^n                warn('weird_condition', that);^n            }^n            return that;^n        });^n^n        infix('&&', 50, function (left, that) {^n            that.first = expected_condition(expected_relation(left));^n            that.second = expected_relation(expression(50));^n            if (are_similar(that.first, that.second)) {^n                warn('weird_condition', that);^n            }^n            return that;^n        });^n^n        prefix('void', function () {^n            this.first = expression(0);^n            this.arity = 'prefix';^n            if (option.es5) {^n                warn('expected_a_b', this, 'undefined', 'void');^n            } else if (this.first.number !== 0) {^n                warn('expected_a_b', this.first, '0', artifact(this.first));^n            }^n            this.type = 'undefined';^n            return this;^n        });^n^n        bitwise('||', 70);^n        bitwise('^^', 80);^n        bitwise('&', 90);^n^n        relation('==', '===');^n        relation('===');^n        relation('!=', '!==');^n        relation('!==');^n        relation('<');^n        relation('>');^n        relation('<=');^n        relation('>=');^n^n        bitwise('<<', 120);^n        bitwise('>>', 120);^n        bitwise('>>>', 120);^n^n        infix('in', 120, function (left, that) {^n            warn('infix_in', that);^n            that.left = left;^n            that.right = expression(130);^n            return that;^n        }, 'boolean');^n        infix('instanceof', 120, null, 'boolean');^n        infix('+', 130, function (left, that) {^n            if (left.id === '(number)') {^n                if (left.number === 0) {^n                    warn('unexpected_a', left, '0');^n                }^n            } else if (left.id === '(string)') {^n                if (left.string === '') {^n                    warn('expected_a_b', left, 'String', '\'\'');^n                }^n            }^n            var right = expression(130);^n            if (right.id === '(number)') {^n                if (right.number === 0) {^n                    warn('unexpected_a', right, '0');^n                }^n            } else if (right.id === '(string)') {^n                if (right.string === '') {^n                    warn('expected_a_b', right, 'String', '\'\'');^n                }^n            }^n            if (left.id === right.id) {^n                if (left.id === '(string)' |||| left.id === '(number)') {^n                    if (left.id === '(string)') {^n                        left.string += right.string;^n                        if (jx.test(left.string)) {^n                            warn('url', left);^n                        }^n                    } else {^n                        left.number += right.number;^n                    }^n                    left.thru = right.thru;^n                    return left;^n                }^n            }^n            that.first = left;^n            that.second = right;^n            return that;^n        });^n        prefix('+', 'num');^n        prefix('+++', function () {^n            warn('confusing_a', token);^n            this.first = expression(150);^n            this.arity = 'prefix';^n            return this;^n        });^n        infix('+++', 130, function (left) {^n            warn('confusing_a', token);^n            this.first = left;^n            this.second = expression(130);^n            return this;^n        });^n        infix('-', 130, function (left, that) {^n            if ((left.id === '(number)' && left.number === 0) |||| left.id === '(string)') {^n                warn('unexpected_a', left);^n            }^n            var right = expression(130);^n            if ((right.id === '(number)' && right.number === 0) |||| right.id === '(string)') {^n                warn('unexpected_a', left);^n            }^n            if (left.id === right.id && left.id === '(number)') {^n                left.number -= right.number;^n                left.thru = right.thru;^n                return left;^n            }^n            that.first = left;^n            that.second = right;^n            return that;^n        }, 'number');^n        prefix('-');^n        prefix('---', function () {^n            warn('confusing_a', token);^n            this.first = expression(150);^n            this.arity = 'prefix';^n            return this;^n        });^n        infix('---', 130, function (left) {^n            warn('confusing_a', token);^n            this.first = left;^n            this.second = expression(130);^n            return this;^n        });^n        infix('*', 140, function (left, that) {^n            if ((left.id === '(number)' && (left.number === 0 |||| left.number === 1)) |||| left.id === '(string)') {^n                warn('unexpected_a', left);^n            }^n            var right = expression(140);^n            if ((right.id === '(number)' && (right.number === 0 |||| right.number === 1)) |||| right.id === '(string)') {^n                warn('unexpected_a', right);^n            }^n            if (left.id === right.id && left.id === '(number)') {^n                left.number *= right.number;^n                left.thru = right.thru;^n                return left;^n            }^n            that.first = left;^n            that.second = right;^n            return that;^n        }, 'number');^n        infix('/', 140, function (left, that) {^n            if ((left.id === '(number)' && left.number === 0) |||| left.id === '(string)') {^n                warn('unexpected_a', left);^n            }^n            var right = expression(140);^n            if ((right.id === '(number)' && (right.number === 0 |||| right.number === 1)) |||| right.id === '(string)') {^n                warn('unexpected_a', right);^n            }^n            if (left.id === right.id && left.id === '(number)') {^n                left.number /= right.number;^n                left.thru = right.thru;^n                return left;^n            }^n            that.first = left;^n            that.second = right;^n            return that;^n        }, 'number');^n        infix('%', 140, function (left, that) {^n            if ((left.id === '(number)' && (left.number === 0 |||| left.number === 1)) |||| left.id === '(string)') {^n                warn('unexpected_a', left);^n            }^n            var right = expression(140);^n            if ((right.id === '(number)' && right.number === 0) |||| right.id === '(string)') {^n                warn('unexpected_a', right);^n            }^n            if (left.id === right.id && left.id === '(number)') {^n                left.number %= right.number;^n                left.thru = right.thru;^n                return left;^n            }^n            that.first = left;^n            that.second = right;^n            return that;^n        }, 'number');^n^n        suffix('++');^n        prefix('++');^n^n        suffix('--');^n        prefix('--');^n        prefix('delete', function () {^n            one_space();^n            var p = expression(0);^n            if (!p |||| (p.id !== '.' && p.id !== '[')) {^n                warn('deleted');^n            }^n            this.first = p;^n            return this;^n        });^n^n^n        prefix('~', function () {^n            no_space_only();^n            if (!option.bitwise) {^n                warn('unexpected_a', this);^n            }^n            expression(150);^n            return this;^n        }, 'number');^n        prefix('!', function () {^n            no_space_only();^n            this.first = expected_condition(expression(150));^n            this.arity = 'prefix';^n            if (bang[this.first.id] === true) {^n                warn('confusing_a', this);^n            }^n            return this;^n        }, 'boolean');^n        prefix('typeof', null, 'string');^n        prefix('new', function () {^n            one_space();^n            var c = expression(160), n, p, v;^n            this.first = c;^n            if (c.id !== 'function') {^n                if (c.identifier) {^n                    switch (c.string) {^n                        case 'Object':^n                            warn('use_object', token);^n                            break;^n                        case 'Array':^n                            if (next_token.id === '(') {^n                                p = next_token;^n                                p.first = this;^n                                advance('(');^n                                if (next_token.id !== ')') {^n                                    n = expression(0);^n                                    p.second = [n];^n                                    if (n.type !== 'number' |||| next_token.id === ',') {^n                                        warn('use_array', p);^n                                    }^n                                    while (next_token.id === ',') {^n                                        advance(',');^n                                        p.second.push(expression(0));^n                                    }^n                                } else {^n                                    warn('use_array', token);^n                                }^n                                advance(')', p);^n                                return p;^n                            }^n                            warn('use_array', token);^n                            break;^n                        case 'Number':^n                        case 'String':^n                        case 'Boolean':^n                        case 'Math':^n                        case 'JSON':^n                            warn('not_a_constructor', c);^n                            break;^n                        case 'Function':^n                            if (!option.evil) {^n                                warn('function_eval');^n                            }^n                            break;^n                        case 'Date':^n                        case 'RegExp':^n                            break;^n                        default:^n                            if (c.id !== 'function') {^n                                v = c.string.charAt(0);^n                                if (!option.newcap && (v < 'A' |||| v > 'Z')) {^n                                    warn('constructor_name_a', token);^n                                }^n                            }^n                    }^n                } else {^n                    if (c.id !== '.' && c.id !== '[' && c.id !== '(') {^n                        warn('bad_constructor', token);^n                    }^n                }^n            } else {^n                warn('weird_new', this);^n            }^n            if (next_token.id !== '(') {^n                warn('missing_a', next_token, '()');^n            }^n            return this;^n        });^n^n        infix('(', 160, function (left, that) {^n            var p;^n            if (indent && indent.mode === 'expression') {^n                no_space(prev_token, token);^n            } else {^n                no_space_only(prev_token, token);^n            }^n            if (!left.immed && left.id === 'function') {^n                warn('wrap_immediate');^n            }^n            p = [];^n            if (left.identifier) {^n                if (left.string.match(/^^[A-Z]([A-Z0-9_$]*[a-z][A-Za-z0-9_$]*)?$/)) {^n                    if (left.string !== 'Number' && left.string !== 'String' &&^n                        left.string !== 'Boolean' && left.string !== 'Date') {^n                        if (left.string === 'Math' |||| left.string === 'JSON') {^n                            warn('not_a_function', left);^n                        } else if (left.string === 'Object') {^n                            warn('use_object', token);^n                        } else if (left.string === 'Array' |||| !option.newcap) {^n                            warn('missing_a', left, 'new');^n                        }^n                    }^n                }^n            } else if (left.id === '.') {^n                if (option.safe && left.first.string === 'Math' &&^n                    left.second === 'random') {^n                    warn('adsafe_a', left);^n                } else if (left.second.string === 'split' &&^n                    left.first.id === '(string)') {^n                    warn('use_array', left.second);^n                }^n            }^n            step_in();^n            if (next_token.id !== ')') {^n                no_space();^n                for (;;) {^n                    edge();^n                    p.push(expression(10));^n                    if (next_token.id !== ',') {^n                        break;^n                    }^n                    comma();^n                }^n            }^n            no_space();^n            step_out(')', that);^n            if (typeof left === 'object') {^n                if (left.string === 'parseInt' && p.length === 1) {^n                    warn('radix', left);^n                }^n                if (!option.evil) {^n                    if (left.string === 'eval' |||| left.string === 'Function' ||||^n                        left.string === 'execScript') {^n                        warn('evil', left);^n                    } else if (p[0] && p[0].id === '(string)' &&^n                        (left.string === 'setTimeout' ||||^n                            left.string === 'setInterval')) {^n                        warn('implied_evil', left);^n                    }^n                }^n                if (!left.identifier && left.id !== '.' && left.id !== '[' &&^n                    left.id !== '(' && left.id !== '&&' && left.id !== '||||' &&^n                    left.id !== '?') {^n                    warn('bad_invocation', left);^n                }^n            }^n            that.first = left;^n            that.second = p;^n            return that;^n        }, '', true);^n^n        prefix('(', function () {^n            step_in('expression');^n            no_space();^n            edge();^n            if (next_token.id === 'function') {^n                next_token.immed = true;^n            }^n            var value = expression(0);^n            value.paren = true;^n            no_space();^n            step_out(')', this);^n            if (value.id === 'function') {^n                if (next_token.id === '(') {^n                    warn('move_invocation');^n                } else {^n                    warn('bad_wrap', this);^n                }^n            }^n            return value;^n        });^n^n        infix('.', 170, function (left, that) {^n            no_space(prev_token, token);^n            no_space();^n            var name = identifier(), type;^n            if (typeof name === 'string') {^n                tally_property(name);^n            }^n            that.first = left;^n            that.second = token;^n            if (left && left.string === 'arguments' &&^n                (name === 'callee' |||| name === 'caller')) {^n                warn('avoid_a', left, 'arguments.' + name);^n            } else if (!option.evil && left && left.string === 'document' &&^n                (name === 'write' |||| name === 'writeln')) {^n                warn('write_is_wrong', left);^n            } else if (option.adsafe) {^n                if (!adsafe_top && left.string === 'ADSAFE') {^n                    if (name === 'id' |||| name === 'lib') {^n                        warn('adsafe_a', that);^n                    } else if (name === 'go') {^n                        if (xmode !== 'script') {^n                            warn('adsafe_a', that);^n                        } else if (adsafe_went |||| next_token.id !== '(' ||||^n                            peek(0).id !== '(string)' ||||^n                            peek(0).string !== adsafe_id ||||^n                            peek(1).id !== ',') {^n                            stop('adsafe_a', that, 'go');^n                        }^n                        adsafe_went = true;^n                        adsafe_may = false;^n                    }^n                }^n                adsafe_top = false;^n            }^n            if (!option.evil && (name === 'eval' |||| name === 'execScript')) {^n                warn('evil');^n            } else if (option.safe) {^n                for (;;) {^n                    if (banned[name] === true) {^n                        warn('adsafe_a', token, name);^n                    }^n                    if (typeof predefined[left.string] !== 'boolean' |||| //// check for writeable^n                        next_token.id === '(') {^n                        break;^n                    }^n                    if (next_token.id !== '.') {^n                        warn('adsafe_a', that);^n                        break;^n                    }^n                    advance('.');^n                    token.first = that;^n                    token.second = name;^n                    that = token;^n                    name = identifier();^n                    if (typeof name === 'string') {^n                        tally_property(name);^n                    }^n                }^n            }^n            type = property_type[name];^n            if (type && typeof type === 'string' && type !== '*') {^n                that.type = type;^n            }^n            return that;^n        }, '', true);^n^n        infix('[', 170, function (left, that) {^n            var e, s;^n            no_space_only(prev_token, token);^n            no_space();^n            step_in();^n            edge();^n            e = expression(0);^n            switch (e.type) {^n                case 'number':^n                    if (e.id === '(number)' && left.id === 'arguments') {^n                        warn('use_param', left);^n                    }^n                    break;^n                case 'string':^n                    if (e.id === '(string)') {^n                        if (option.safe && (banned[e.string] ||||^n                            e.string.charAt(0) === '_' |||| e.string.slice(-1) === '_')) {^n                            warn('adsafe_subscript_a', e);^n                        } else if (!option.evil &&^n                            (e.string === 'eval' |||| e.string === 'execScript')) {^n                            warn('evil', e);^n                        } else if (!option.sub && ix.test(e.string)) {^n                            s = syntax[e.string];^n                            if (!s |||| !s.reserved) {^n                                warn('subscript', e);^n                            }^n                        }^n                        tally_property(e.string);^n                    } else if (option.safe && e.id !== 'typeof') {^n                        warn('adsafe_subscript_a', e);^n                    }^n                    break;^n                case undefined:^n                    if (option.safe) {^n                        warn('adsafe_subscript_a', e);^n                    }^n                    break;^n                default:^n                    if (option.safe) {^n                        warn('adsafe_subscript_a', e);^n                    }^n            }^n            step_out(']', that);^n            no_space(prev_token, token);^n            that.first = left;^n            that.second = e;^n            return that;^n        }, '', true);^n^n        prefix('[', function () {^n            this.arity = 'prefix';^n            this.first = [];^n            step_in('array');^n            while (next_token.id !== '(end)') {^n                while (next_token.id === ',') {^n                    warn('unexpected_a', next_token);^n                    advance(',');^n                }^n                if (next_token.id === ']') {^n                    break;^n                }^n                indent.wrap = false;^n                edge();^n                this.first.push(expression(10));^n                if (next_token.id === ',') {^n                    comma();^n                    if (next_token.id === ']' && !option.es5) {^n                        warn('unexpected_a', token);^n                        break;^n                    }^n                } else {^n                    break;^n                }^n            }^n            step_out(']', this);^n            return this;^n        }, 170);^n^n^n        function property_name() {^n            var id = optional_identifier(true);^n            if (!id) {^n                if (next_token.id === '(string)') {^n                    id = next_token.string;^n                    if (option.safe) {^n                        if (banned[id]) {^n                            warn('adsafe_a');^n                        } else if (id.charAt(0) === '_' ||||^n                            id.charAt(id.length - 1) === '_') {^n                            warn('dangling_a');^n                        }^n                    }^n                    advance();^n                } else if (next_token.id === '(number)') {^n                    id = next_token.number.toString();^n                    advance();^n                }^n            }^n            return id;^n        }^n^n^n        function function_params() {^n            var id, paren = next_token, params = [];^n            advance('(');^n            step_in();^n            no_space();^n            if (next_token.id === ')') {^n                no_space();^n                step_out(')', paren);^n                return;^n            }^n            for (;;) {^n                edge();^n                id = identifier();^n                params.push(token);^n                add_label(token, option.unparam ? 'parameter' : 'unparam');^n                if (next_token.id === ',') {^n                    comma();^n                } else {^n                    no_space();^n                    step_out(')', paren);^n                    return params;^n                }^n            }^n        }^n^n^n        function complexity(exp) {^n            var score = 0;^n            if (exp) {^n                if (Array.isArray(exp)) {^n                    exp.forEach(function (tok) {^n                        score += complexity(tok);^n                    });^n                } else {^n                    switch (exp.arity) {^n                        case 'statement':^n                            switch (exp.id) {^n                                case 'if':^n                                    score += complexity(exp.first) + complexity(exp.block) +^n                                        complexity(exp['else']) + 1;^n                                    break;^n                                case 'while':^n                                case 'do':^n                                    if (exp.first.id !== 'true' && exp.first.number !== 1) {^n                                        score += 1;^n                                    }^n                                    score += complexity(exp.first) + complexity(exp.block);^n                                    break;^n                                case 'for':^n                                    if (exp.second !== undefined &&^n                                        exp.second.id !== 'true' &&^n                                        exp.second.number !== 1) {^n                                        score += 1;^n                                    }^n                                    score += complexity(exp.first) + complexity(exp.second) +^n                                        complexity(exp.third) + complexity(exp.block);^n                                    break;^n                                case 'switch':^n                                    score += complexity(exp.first) +^n                                        complexity(exp.second) + exp.second.length;^n                                    if (exp.second[exp.second.length - 1].id === 'default') {^n                                        score -= 1;^n                                    }^n                                    break;^n                                case 'try':^n                                    if (exp.second) {^n                                        score += 1;^n                                    }^n                                    if (exp.third) {^n                                        score += 1;^n                                    }^n                                    score += complexity(exp.first) + complexity(exp.second) +^n                                        complexity(exp.third) + complexity(exp.block);^n                                    break;^n                            }^n                            break;^n                        case 'prefix':^n                            score += complexity(exp.first);^n                            break;^n                        case 'case':^n                        case 'infix':^n                            score += complexity(exp.first) + complexity(exp.second);^n                            if (exp.id === '&&' |||| exp.id === '||||') {^n                                score += 1;^n                            }^n                            break;^n                        case 'ternary':^n                            score += complexity(exp.first) + complexity(exp.second) + complexity(exp.third);^n                            break;^n                    }^n                }^n            }^n            return score;^n        }^n^n^n        function do_function(func, name) {^n            var old_funct = funct,^n                old_option = option,^n                old_scope = scope;^n            funct = {^n                '(name)' : name |||| '\'' + (anonname |||| '').replace(nx, sanitize) + '\'',^n                '(line)' : next_token.line,^n                '(context)' : old_funct,^n                '(breakage)' : 0,^n                '(loopage)' : 0,^n                '(scope)' : scope,^n                '(token)' : func^n            };^n            option = Object.create(old_option);^n            scope = Object.create(old_scope);^n            functions.push(funct);^n            func.name = name;^n            if (name) {^n                add_label(func, 'function', name);^n            }^n            func.writeable = false;^n            func.first = funct['(params)'] = function_params();^n            one_space();^n            func.block = block(false);^n            if (funct['(old_property_type)']) {^n                property_type = funct['(old_property_type)'];^n                delete funct['(old_property_type)'];^n            }^n            funct['(complexity)'] = complexity(func.block) + 1;^n            if (option.confusion) {^n                funct['(confusion)'] = true;^n            }^n            funct = old_funct;^n            option = old_option;^n            scope = old_scope;^n        }^n^n^n        assignop('=');^n        assignop('+=', '+');^n        assignop('-=', '-');^n        assignop('*=', '*');^n        assignop('/=', '/').nud = function () {^n            stop('slash_equal');^n        };^n        assignop('%=', '%');^n        assignop('&=', '&');^n        assignop('||=', '||');^n        assignop('^^=', '^^');^n        assignop('<<=', '<<');^n        assignop('>>=', '>>');^n        assignop('>>>=', '>>>');^n^n^n        prefix('{', function () {^n            var get, i, j, name, p, set, seen = {};^n            this.arity = 'prefix';^n            this.first = [];^n            step_in();^n            while (next_token.id !== '}') {^n                indent.wrap = false;^n^n// JSLint recognizes the ES5 extension for get/set in object literals,^n// but requires that they be used in pairs.^n^n                edge();^n                if (next_token.string === 'get' && peek(0).id !== ':') {^n                    if (!option.es5) {^n                        warn('es5');^n                    }^n                    get = next_token;^n                    advance('get');^n                    one_space_only();^n                    name = next_token;^n                    i = property_name();^n                    if (!i) {^n                        stop('missing_property');^n                    }^n                    get.string = '';^n                    do_function(get);^n                    if (funct['(loopage)']) {^n                        warn('function_loop', get);^n                    }^n                    p = get.first;^n                    if (p) {^n                        warn('parameter_a_get_b', p[0], p[0].string, i);^n                    }^n                    comma();^n                    set = next_token;^n                    set.string = '';^n                    spaces();^n                    edge();^n                    advance('set');^n                    one_space_only();^n                    j = property_name();^n                    if (i !== j) {^n                        stop('expected_a_b', token, i, j |||| next_token.string);^n                    }^n                    do_function(set);^n                    p = set.first;^n                    if (!p |||| p.length !== 1) {^n                        stop('parameter_set_a', set, 'value');^n                    } else if (p[0].string !== 'value') {^n                        stop('expected_a_b', p[0], 'value', p[0].string);^n                    }^n                    name.first = [get, set];^n                } else {^n                    name = next_token;^n                    i = property_name();^n                    if (typeof i !== 'string') {^n                        stop('missing_property');^n                    }^n                    advance(':');^n                    spaces();^n                    name.first = expression(10);^n                }^n                this.first.push(name);^n                if (seen[i] === true) {^n                    warn('duplicate_a', next_token, i);^n                }^n                seen[i] = true;^n                tally_property(i);^n                if (next_token.id !== ',') {^n                    break;^n                }^n                for (;;) {^n                    comma();^n                    if (next_token.id !== ',') {^n                        break;^n                    }^n                    warn('unexpected_a', next_token);^n                }^n                if (next_token.id === '}' && !option.es5) {^n                    warn('unexpected_a', token);^n                }^n            }^n            step_out('}', this);^n            return this;^n        });^n^n        stmt('{', function () {^n            warn('statement_block');^n            this.arity = 'statement';^n            this.block = statements();^n            this.disrupt = this.block.disrupt;^n            advance('}', this);^n            return this;^n        });^n^n        stmt('/*global', directive);^n        stmt('/*globals', directive);^n        stmt('/*jslint', directive);^n        stmt('/*member', directive);^n        stmt('/*members', directive);^n        stmt('/*property', directive);^n        stmt('/*properties', directive);^n^n        stmt('var', function () {^n^n// JavaScript does not have block scope. It only has function scope. So,^n// declaring a variable in a block can have unexpected consequences.^n^n// var.first will contain an array, the array containing name tokens^n// and assignment tokens.^n^n            var assign, id, name;^n^n            if (funct['(vars)'] && !option.vars) {^n                warn('combine_var');^n            } else if (funct !== global_funct) {^n                funct['(vars)'] = true;^n            }^n            this.arity = 'statement';^n            this.first = [];^n            step_in('var');^n            for (;;) {^n                name = next_token;^n                id = identifier();^n                add_label(name, 'becoming');^n^n                if (next_token.id === '=') {^n                    assign = next_token;^n                    assign.first = name;^n                    spaces();^n                    advance('=');^n                    spaces();^n                    if (next_token.id === 'undefined') {^n                        warn('unnecessary_initialize', token, id);^n                    }^n                    if (peek(0).id === '=' && next_token.identifier) {^n                        stop('var_a_not');^n                    }^n                    assign.second = expression(0);^n                    assign.arity = 'infix';^n                    this.first.push(assign);^n                } else {^n                    this.first.push(name);^n                }^n                if (funct[id] === 'becoming') {^n                    funct[id] = 'unused';^n                }^n                if (next_token.id !== ',') {^n                    break;^n                }^n                comma();^n                indent.wrap = false;^n                if (var_mode && next_token.line === token.line &&^n                    this.first.length === 1) {^n                    var_mode = null;^n                    indent.open = false;^n                    indent.at -= option.indent;^n                }^n                spaces();^n                edge();^n            }^n            var_mode = null;^n            step_out();^n            return this;^n        });^n^n        stmt('function', function () {^n            one_space();^n            if (in_block) {^n                warn('function_block', token);^n            }^n            var name = next_token, id = identifier();^n            add_label(name, 'unction');^n            no_space();^n            this.arity = 'statement';^n            do_function(this, id);^n            if (next_token.id === '(' && next_token.line === token.line) {^n                stop('function_statement');^n            }^n            return this;^n        });^n^n        prefix('function', function () {^n            one_space();^n            var id = optional_identifier();^n            if (id) {^n                no_space();^n            } else {^n                id = '';^n            }^n            do_function(this, id);^n            if (funct['(loopage)']) {^n                warn('function_loop');^n            }^n            this.arity = 'function';^n            return this;^n        });^n^n        stmt('if', function () {^n            var paren = next_token;^n            one_space();^n            advance('(');^n            step_in('control');^n            no_space();^n            edge();^n            this.arity = 'statement';^n            this.first = expected_condition(expected_relation(expression(0)));^n            no_space();^n            step_out(')', paren);^n            one_space();^n            this.block = block(true);^n            if (next_token.id === 'else') {^n                one_space();^n                advance('else');^n                one_space();^n                this['else'] = next_token.id === 'if' |||| next_token.id === 'switch' ?^n                    statement(true) : block(true);^n                if (this['else'].disrupt && this.block.disrupt) {^n                    this.disrupt = true;^n                }^n            }^n            return this;^n        });^n^n        stmt('try', function () {^n^n// try.first The catch variable^n// try.second The catch clause^n// try.third The finally clause^n// try.block The try block^n^n            var exception_variable, old_scope, paren;^n            if (option.adsafe) {^n                warn('adsafe_a', this);^n            }^n            one_space();^n            this.arity = 'statement';^n            this.block = block(false);^n            if (next_token.id === 'catch') {^n                one_space();^n                advance('catch');^n                one_space();^n                paren = next_token;^n                advance('(');^n                step_in('control');^n                no_space();^n                edge();^n                old_scope = scope;^n                scope = Object.create(old_scope);^n                exception_variable = next_token.string;^n                this.first = exception_variable;^n                if (!next_token.identifier) {^n                    warn('expected_identifier_a', next_token);^n                } else {^n                    add_label(next_token, 'exception');^n                }^n                advance();^n                no_space();^n                step_out(')', paren);^n                one_space();^n                this.second = block(false);^n                scope = old_scope;^n            }^n            if (next_token.id === 'finally') {^n                one_space();^n                advance('finally');^n                one_space();^n                this.third = block(false);^n            } else if (!this.second) {^n                stop('expected_a_b', next_token, 'catch', artifact());^n            }^n            return this;^n        });^n^n        labeled_stmt('while', function () {^n            one_space();^n            var paren = next_token;^n            funct['(breakage)'] += 1;^n            funct['(loopage)'] += 1;^n            advance('(');^n            step_in('control');^n            no_space();^n            edge();^n            this.arity = 'statement';^n            this.first = expected_relation(expression(0));^n            if (this.first.id !== 'true') {^n                expected_condition(this.first, bundle.unexpected_a);^n            }^n            no_space();^n            step_out(')', paren);^n            one_space();^n            this.block = block(true);^n            if (this.block.disrupt) {^n                warn('strange_loop', prev_token);^n            }^n            funct['(breakage)'] -= 1;^n            funct['(loopage)'] -= 1;^n            return this;^n        });^n^n        reserve('with');^n^n        labeled_stmt('switch', function () {^n^n// switch.first the switch expression^n// switch.second the array of cases. A case is 'case' or 'default' token:^n// case.first the array of case expressions^n// case.second the array of statements^n// If all of the arrays of statements are disrupt, then the switch is disrupt.^n^n            var cases = [],^n                old_in_block = in_block,^n                particular,^n                the_case = next_token,^n                unbroken = true;^n^n            function find_duplicate_case(value) {^n                if (are_similar(particular, value)) {^n                    warn('duplicate_a', value);^n                }^n            }^n^n            funct['(breakage)'] += 1;^n            one_space();^n            advance('(');^n            no_space();^n            step_in();^n            this.arity = 'statement';^n            this.first = expected_condition(expected_relation(expression(0)));^n            no_space();^n            step_out(')', the_case);^n            one_space();^n            advance('{');^n            step_in();^n            in_block = true;^n            this.second = [];^n            while (next_token.id === 'case') {^n                the_case = next_token;^n                cases.forEach(find_duplicate_case);^n                the_case.first = [];^n                the_case.arity = 'case';^n                spaces();^n                edge('case');^n                advance('case');^n                for (;;) {^n                    one_space();^n                    particular = expression(0);^n                    cases.forEach(find_duplicate_case);^n                    cases.push(particular);^n                    the_case.first.push(particular);^n                    if (particular.id === 'NaN') {^n                        warn('unexpected_a', particular);^n                    }^n                    no_space_only();^n                    advance(':');^n                    if (next_token.id !== 'case') {^n                        break;^n                    }^n                    spaces();^n                    edge('case');^n                    advance('case');^n                }^n                spaces();^n                the_case.second = statements();^n                if (the_case.second && the_case.second.length > 0) {^n                    particular = the_case.second[the_case.second.length - 1];^n                    if (particular.disrupt) {^n                        if (particular.id === 'break') {^n                            unbroken = false;^n                        }^n                    } else {^n                        warn('missing_a_after_b', next_token, 'break', 'case');^n                    }^n                } else {^n                    warn('empty_case');^n                }^n                this.second.push(the_case);^n            }^n            if (this.second.length === 0) {^n                warn('missing_a', next_token, 'case');^n            }^n            if (next_token.id === 'default') {^n                spaces();^n                the_case = next_token;^n                the_case.arity = 'case';^n                edge('case');^n                advance('default');^n                no_space_only();^n                advance(':');^n                spaces();^n                the_case.second = statements();^n                if (the_case.second && the_case.second.length > 0) {^n                    particular = the_case.second[the_case.second.length - 1];^n                    if (unbroken && particular.disrupt && particular.id !== 'break') {^n                        this.disrupt = true;^n                    }^n                }^n                this.second.push(the_case);^n            }^n            funct['(breakage)'] -= 1;^n            spaces();^n            step_out('}', this);^n            in_block = old_in_block;^n            return this;^n        });^n^n        stmt('debugger', function () {^n            if (!option.debug) {^n                warn('unexpected_a', this);^n            }^n            this.arity = 'statement';^n            return this;^n        });^n^n        labeled_stmt('do', function () {^n            funct['(breakage)'] += 1;^n            funct['(loopage)'] += 1;^n            one_space();^n            this.arity = 'statement';^n            this.block = block(true);^n            if (this.block.disrupt) {^n                warn('strange_loop', prev_token);^n            }^n            one_space();^n            advance('while');^n            var paren = next_token;^n            one_space();^n            advance('(');^n            step_in();^n            no_space();^n            edge();^n            this.first = expected_condition(expected_relation(expression(0)), bundle.unexpected_a);^n            no_space();^n            step_out(')', paren);^n            funct['(breakage)'] -= 1;^n            funct['(loopage)'] -= 1;^n            return this;^n        });^n^n        labeled_stmt('for', function () {^n^n            var blok, filter, ok = false, paren = next_token, value;^n            this.arity = 'statement';^n            funct['(breakage)'] += 1;^n            funct['(loopage)'] += 1;^n            advance('(');^n            step_in('control');^n            spaces(this, paren);^n            no_space();^n            if (next_token.id === 'var') {^n                stop('move_var');^n            }^n            edge();^n            if (peek(0).id === 'in') {^n                this.forin = true;^n                value = next_token;^n                switch (funct[value.string]) {^n                    case 'unused':^n                        funct[value.string] = 'var';^n                        break;^n                    case 'closure':^n                    case 'var':^n                        break;^n                    default:^n                        warn('bad_in_a', value);^n                }^n                advance();^n                advance('in');^n                this.first = value;^n                this.second = expression(20);^n                step_out(')', paren);^n                blok = block(true);^n                if (!option.forin) {^n                    if (blok.length === 1 && typeof blok[0] === 'object' &&^n                        blok[0].string === 'if' && !blok[0]['else']) {^n                        filter = blok[0].first;^n                        while (filter.id === '&&') {^n                            filter = filter.first;^n                        }^n                        switch (filter.id) {^n                            case '===':^n                            case '!==':^n                                ok = filter.first.id === '[' ? (^n                                    filter.first.first.string === this.second.string &&^n                                        filter.first.second.string === this.first.string^n                                    ) : (^n                                    filter.first.id === 'typeof' &&^n                                        filter.first.first.id === '[' &&^n                                        filter.first.first.first.string === this.second.string &&^n                                        filter.first.first.second.string === this.first.string^n                                    );^n                                break;^n                            case '(':^n                                ok = filter.first.id === '.' && ((^n                                    filter.first.first.string === this.second.string &&^n                                        filter.first.second.string === 'hasOwnProperty' &&^n                                        filter.second[0].string === this.first.string^n                                    ) |||| (^n                                    filter.first.first.string === 'ADSAFE' &&^n                                        filter.first.second.string === 'has' &&^n                                        filter.second[0].string === this.second.string &&^n                                        filter.second[1].string === this.first.string^n                                    ) |||| (^n                                    filter.first.first.id === '.' &&^n                                        filter.first.first.first.id === '.' &&^n                                        filter.first.first.first.first.string === 'Object' &&^n                                        filter.first.first.first.second.string === 'prototype' &&^n                                        filter.first.first.second.string === 'hasOwnProperty' &&^n                                        filter.first.second.string === 'call' &&^n                                        filter.second[0].string === this.second.string &&^n                                        filter.second[1].string === this.first.string^n                                    ));^n                                break;^n                        }^n                    }^n                    if (!ok) {^n                        warn('for_if', this);^n                    }^n                }^n            } else {^n                if (next_token.id !== ';') {^n                    edge();^n                    this.first = [];^n                    for (;;) {^n                        this.first.push(expression(0, 'for'));^n                        if (next_token.id !== ',') {^n                            break;^n                        }^n                        comma();^n                    }^n                }^n                semicolon();^n                if (next_token.id !== ';') {^n                    edge();^n                    this.second = expected_relation(expression(0));^n                    if (this.second.id !== 'true') {^n                        expected_condition(this.second, bundle.unexpected_a);^n                    }^n                }^n                semicolon(token);^n                if (next_token.id === ';') {^n                    stop('expected_a_b', next_token, ')', ';');^n                }^n                if (next_token.id !== ')') {^n                    this.third = [];^n                    edge();^n                    for (;;) {^n                        this.third.push(expression(0, 'for'));^n                        if (next_token.id !== ',') {^n                            break;^n                        }^n                        comma();^n                    }^n                }^n                no_space();^n                step_out(')', paren);^n                one_space();^n                blok = block(true);^n            }^n            if (blok.disrupt) {^n                warn('strange_loop', prev_token);^n            }^n            this.block = blok;^n            funct['(breakage)'] -= 1;^n            funct['(loopage)'] -= 1;^n            return this;^n        });^n^n        disrupt_stmt('break', function () {^n            var label = next_token.string;^n            this.arity = 'statement';^n            if (funct['(breakage)'] === 0) {^n                warn('unexpected_a', this);^n            }^n            if (next_token.identifier && token.line === next_token.line) {^n                one_space_only();^n                if (funct[label] !== 'label') {^n                    warn('not_a_label', next_token);^n                } else if (scope[label].funct !== funct) {^n                    warn('not_a_scope', next_token);^n                }^n                this.first = next_token;^n                advance();^n            }^n            return this;^n        });^n^n        disrupt_stmt('continue', function () {^n            if (!option['continue']) {^n                warn('unexpected_a', this);^n            }^n            var label = next_token.string;^n            this.arity = 'statement';^n            if (funct['(breakage)'] === 0) {^n                warn('unexpected_a', this);^n            }^n            if (next_token.identifier && token.line === next_token.line) {^n                one_space_only();^n                if (funct[label] !== 'label') {^n                    warn('not_a_label', next_token);^n                } else if (scope[label].funct !== funct) {^n                    warn('not_a_scope', next_token);^n                }^n                this.first = next_token;^n                advance();^n            }^n            return this;^n        });^n^n        disrupt_stmt('return', function () {^n            if (funct === global_funct) {^n                warn('unexpected_a', this);^n            }^n            this.arity = 'statement';^n            if (next_token.id !== ';' && next_token.line === token.line) {^n                one_space_only();^n                if (next_token.id === '/' |||| next_token.id === '(regexp)') {^n                    warn('wrap_regexp');^n                }^n                this.first = expression(20);^n            }^n            return this;^n        });^n^n        disrupt_stmt('throw', function () {^n            this.arity = 'statement';^n            one_space_only();^n            this.first = expression(20);^n            return this;^n        });^n^n^n// Superfluous reserved words^n^n        reserve('class');^n        reserve('const');^n        reserve('enum');^n        reserve('export');^n        reserve('extends');^n        reserve('import');^n        reserve('super');^n^n// Harmony reserved words^n^n        reserve('implements');^n        reserve('interface');^n        reserve('let');^n        reserve('package');^n        reserve('private');^n        reserve('protected');^n        reserve('public');^n        reserve('static');^n        reserve('yield');^n^n^n// Type inference^n^n        function get_type(one) {^n            var type;^n            if (typeof one === 'string') {^n                return one;^n            } else if (one.type) {^n                return one.type;^n            } else if (one.id === '.') {^n                type = property_type[one.second.string];^n                return typeof type === 'string' ? type : '';^n            } else {^n                return ((one.identifier && scope[one.string]) |||| one).type;^n            }^n        }^n^n^n        function match_type(one_type, two_type, one, two) {^n            if (one_type === two_type) {^n                return true;^n            } else {^n                if (!funct.confusion && !two.warn) {^n                    if (typeof one !== 'string') {^n                        if (one.id === '.') {^n                            one_type = '.' + one.second.string + ': ' + one_type;^n                        } else {^n                            one_type = one.string + ': ' + one_type;^n                        }^n                    }^n                    if (two.id === '.') {^n                        two_type = '.' + two.second.string + ': ' + one_type;^n                    } else {^n                        two_type = two.string + ': ' + one_type;^n                    }^n                    warn('type_confusion_a_b', two, one_type, two_type);^n                    two.warn = true;^n                }^n                return false;^n            }^n        }^n^n^n        function conform(one, two) {^n^n// The conform function takes a type string and a token, or two tokens.^n^n            var one_type = typeof one === 'string' ? one : one.type,^n                two_type = two.type,^n                two_thing;^n^n// If both tokens already have a type, and if they match, then we are done.^n// Once a token has a type, it is locked. Neither token will change, but if^n// they do not match, there will be a warning.^n^n            if (one_type) {^n                if (two_type) {^n                    match_type(one_type, two_type, one, two);^n                } else {^n^n// two does not have a type, so look deeper. If two is a variable or property,^n// then use its type if it has one, and make the deep type one's type if it^n// doesn't. If the type was *, or if there was a mismatch, don't change the^n// deep type.^n^n                    two_thing = two.id === '(identifier)' ? scope[two.string] :^n                        two.id === '.' ? property_type[two.second.string] : null;^n                    if (two_thing) {^n                        two_type = two_thing.type;^n                        if (two_type) {^n                            if (two_type !== '*') {^n                                if (!match_type(one_type, two_type, one, two)) {^n                                    return '';^n                                }^n                            }^n                        } else {^n                            two_thing.type = one_type;^n                        }^n                    }^n^n// In any case, we give two a type.^n^n                    two.type = one_type;^n                    type_state_change = true;^n                    return one_type;^n                }^n^n// one does not have a type, but two does, so do the old switcheroo.^n^n            } else {^n                if (two_type) {^n                    return conform(two, one);^n^n// Neither token has a type yet. So we have to look deeper to see if either^n// is a variable or property.^n^n                } else {^n                    if (one.id === '(identifier)') {^n                        one_type = scope[one.string].type;^n                        if (one_type && one_type !== '*') {^n                            one.type = one_type;^n                            return conform(one, two);^n                        }^n                    } else if (one.id === '.') {^n                        one_type = property_type[one.second.string];^n                        if (one_type && one_type !== '*') {^n                            one.type = scope[one.string].type;^n                            return conform(one, two);^n                        }^n                    }^n                    if (two.id === '(identifier)') {^n                        two_type = scope[two.string].type;^n                        if (two_type && two_type !== '*') {^n                            two.type = two_type;^n                            return conform(two, one);^n                        }^n                    } else if (two.id === '.') {^n                        two_type = property_type[two.second.string];^n                        if (two_type && two_type !== '*') {^n                            two.type = scope[two.string].type;^n                            return conform(two, one);^n                        }^n                    }^n                }^n            }^n^n// Return a falsy string if we were unable to determine the type of either token.^n^n            return '';^n        }^n^n        function conform_array(type, array) {^n            array.forEach(function (item) {^n                return conform(type, item);^n            }, type);^n        }^n^n^n        function infer(node) {^n            if (Array.isArray(node)) {^n                node.forEach(infer);^n            } else {^n                switch (node.arity) {^n                    case 'statement':^n                        infer_statement[node.id](node);^n                        break;^n                    case 'infix':^n                        infer(node.first);^n                        infer(node.second);^n                        switch (node.id) {^n                            case '(':^n                                conform('function', node.first);^n                                break;^n                            default:^n                                stop('unfinished');^n                        }^n                        break;^n                    case 'number':^n                    case 'string':^n                    case 'boolean':^n                        break;^n                    default:^n                        stop('unfinished');^n                }^n            }^n        }^n^n^n        infer_statement = {^n            'var': function (node) {^n                var i, item, list = node.first;^n                for (i = 0; i < list.length; i += 1) {^n                    item = list[i];^n                    if (item.id === '=') {^n                        infer(item.second);^n                        conform(item.first, item.second);^n                        conform(item.first, item);^n                    }^n                }^n            },^n            'for': function (node) {^n                infer(node.first);^n                infer(node.second);^n                if (node.forin) {^n                    conform('string', node.first);^n                    conform('object', node.second);^n                } else {^n                    infer(node.third);^n                    conform_array('number', node.first);^n                    conform('boolean', node.second);^n                    conform_array('number', node.third);^n                }^n                infer(node.block);^n            }^n        };^n^n^n        function infer_types(node) {^n            do {^n                funct = global_funct;^n                scope = global_scope;^n                type_state_change = false;^n                infer(node);^n            } while (type_state_change);^n        }^n^n^n// Parse JSON^n^n        function json_value() {^n^n            function json_object() {^n                var brace = next_token, object = {};^n                advance('{');^n                if (next_token.id !== '}') {^n                    while (next_token.id !== '(end)') {^n                        while (next_token.id === ',') {^n                            warn('unexpected_a', next_token);^n                            advance(',');^n                        }^n                        if (next_token.id !== '(string)') {^n                            warn('expected_string_a');^n                        }^n                        if (object[next_token.string] === true) {^n                            warn('duplicate_a');^n                        } else if (next_token.string === '__proto__') {^n                            warn('dangling_a');^n                        } else {^n                            object[next_token.string] = true;^n                        }^n                        advance();^n                        advance(':');^n                        json_value();^n                        if (next_token.id !== ',') {^n                            break;^n                        }^n                        advance(',');^n                        if (next_token.id === '}') {^n                            warn('unexpected_a', token);^n                            break;^n                        }^n                    }^n                }^n                advance('}', brace);^n            }^n^n            function json_array() {^n                var bracket = next_token;^n                advance('[');^n                if (next_token.id !== ']') {^n                    while (next_token.id !== '(end)') {^n                        while (next_token.id === ',') {^n                            warn('unexpected_a', next_token);^n                            advance(',');^n                        }^n                        json_value();^n                        if (next_token.id !== ',') {^n                            break;^n                        }^n                        advance(',');^n                        if (next_token.id === ']') {^n                            warn('unexpected_a', token);^n                            break;^n                        }^n                    }^n                }^n                advance(']', bracket);^n            }^n^n            switch (next_token.id) {^n                case '{':^n                    json_object();^n                    break;^n                case '[':^n                    json_array();^n                    break;^n                case 'true':^n                case 'false':^n                case 'null':^n                case '(number)':^n                case '(string)':^n                    advance();^n                    break;^n                case '-':^n                    advance('-');^n                    no_space_only();^n                    advance('(number)');^n                    break;^n                default:^n                    stop('unexpected_a');^n            }^n        }^n^n^n// CSS parsing.^n^n        function css_name() {^n            if (next_token.identifier) {^n                advance();^n                return true;^n            }^n        }^n^n^n        function css_number() {^n            if (next_token.id === '-') {^n                advance('-');^n                no_space_only();^n            }^n            if (next_token.id === '(number)') {^n                advance('(number)');^n                return true;^n            }^n        }^n^n^n        function css_string() {^n            if (next_token.id === '(string)') {^n                advance();^n                return true;^n            }^n        }^n^n        function css_color() {^n            var i, number, paren, value;^n            if (next_token.identifier) {^n                value = next_token.string;^n                if (value === 'rgb' |||| value === 'rgba') {^n                    advance();^n                    paren = next_token;^n                    advance('(');^n                    for (i = 0; i < 3; i += 1) {^n                        if (i) {^n                            comma();^n                        }^n                        number = next_token.number;^n                        if (next_token.id !== '(string)' |||| number < 0) {^n                            warn('expected_positive_a', next_token);^n                            advance();^n                        } else {^n                            advance();^n                            if (next_token.id === '%') {^n                                advance('%');^n                                if (number > 100) {^n                                    warn('expected_percent_a', token, number);^n                                }^n                            } else {^n                                if (number > 255) {^n                                    warn('expected_small_a', token, number);^n                                }^n                            }^n                        }^n                    }^n                    if (value === 'rgba') {^n                        comma();^n                        number = next_token.number;^n                        if (next_token.id !== '(string)' |||| number < 0 |||| number > 1) {^n                            warn('expected_fraction_a', next_token);^n                        }^n                        advance();^n                        if (next_token.id === '%') {^n                            warn('unexpected_a');^n                            advance('%');^n                        }^n                    }^n                    advance(')', paren);^n                    return true;^n                } else if (css_colorData[next_token.string] === true) {^n                    advance();^n                    return true;^n                }^n            } else if (next_token.id === '(color)') {^n                advance();^n                return true;^n            }^n            return false;^n        }^n^n^n        function css_length() {^n            if (next_token.id === '-') {^n                advance('-');^n                no_space_only();^n            }^n            if (next_token.id === '(number)') {^n                advance();^n                if (next_token.id !== '(string)' &&^n                    css_lengthData[next_token.string] === true) {^n                    no_space_only();^n                    advance();^n                } else if (+token.number !== 0) {^n                    warn('expected_linear_a');^n                }^n                return true;^n            }^n            return false;^n        }^n^n^n        function css_line_height() {^n            if (next_token.id === '-') {^n                advance('-');^n                no_space_only();^n            }^n            if (next_token.id === '(number)') {^n                advance();^n                if (next_token.id !== '(string)' &&^n                    css_lengthData[next_token.string] === true) {^n                    no_space_only();^n                    advance();^n                }^n                return true;^n            }^n            return false;^n        }^n^n^n        function css_width() {^n            if (next_token.identifier) {^n                switch (next_token.string) {^n                    case 'thin':^n                    case 'medium':^n                    case 'thick':^n                        advance();^n                        return true;^n                }^n            } else {^n                return css_length();^n            }^n        }^n^n^n        function css_margin() {^n            if (next_token.identifier) {^n                if (next_token.string === 'auto') {^n                    advance();^n                    return true;^n                }^n            } else {^n                return css_length();^n            }^n        }^n^n        function css_attr() {^n            if (next_token.identifier && next_token.string === 'attr') {^n                advance();^n                advance('(');^n                if (!next_token.identifier) {^n                    warn('expected_name_a');^n                }^n                advance();^n                advance(')');^n                return true;^n            }^n            return false;^n        }^n^n^n        function css_comma_list() {^n            while (next_token.id !== ';') {^n                if (!css_name() && !css_string()) {^n                    warn('expected_name_a');^n                }^n                if (next_token.id !== ',') {^n                    return true;^n                }^n                comma();^n            }^n        }^n^n^n        function css_counter() {^n            if (next_token.identifier && next_token.string === 'counter') {^n                advance();^n                advance('(');^n                advance();^n                if (next_token.id === ',') {^n                    comma();^n                    if (next_token.id !== '(string)') {^n                        warn('expected_string_a');^n                    }^n                    advance();^n                }^n                advance(')');^n                return true;^n            }^n            if (next_token.identifier && next_token.string === 'counters') {^n                advance();^n                advance('(');^n                if (!next_token.identifier) {^n                    warn('expected_name_a');^n                }^n                advance();^n                if (next_token.id === ',') {^n                    comma();^n                    if (next_token.id !== '(string)') {^n                        warn('expected_string_a');^n                    }^n                    advance();^n                }^n                if (next_token.id === ',') {^n                    comma();^n                    if (next_token.id !== '(string)') {^n                        warn('expected_string_a');^n                    }^n                    advance();^n                }^n                advance(')');^n                return true;^n            }^n            return false;^n        }^n^n^n        function css_radius() {^n            return css_length() && (next_token.id !== '(number)' |||| css_length());^n        }^n^n^n        function css_shape() {^n            var i;^n            if (next_token.identifier && next_token.string === 'rect') {^n                advance();^n                advance('(');^n                for (i = 0; i < 4; i += 1) {^n                    if (!css_length()) {^n                        warn('expected_number_a');^n                        break;^n                    }^n                }^n                advance(')');^n                return true;^n            }^n            return false;^n        }^n^n^n        function css_url() {^n            var c, url;^n            if (next_token.identifier && next_token.string === 'url') {^n                next_token = lex.range('(', ')');^n                url = next_token.string;^n                c = url.charAt(0);^n                if (c === '"' |||| c === '\'') {^n                    if (url.slice(-1) !== c) {^n                        warn('bad_url_a');^n                    } else {^n                        url = url.slice(1, -1);^n                        if (url.indexOf(c) >= 0) {^n                            warn('bad_url_a');^n                        }^n                    }^n                }^n                if (!url) {^n                    warn('missing_url');^n                }^n                if (ux.test(url)) {^n                    stop('bad_url_a');^n                }^n                urls.push(url);^n                advance();^n                return true;^n            }^n            return false;^n        }^n^n^n        css_any = [css_url, function () {^n            for (;;) {^n                if (next_token.identifier) {^n                    switch (next_token.string.toLowerCase()) {^n                        case 'url':^n                            css_url();^n                            break;^n                        case 'expression':^n                            warn('unexpected_a');^n                            advance();^n                            break;^n                        default:^n                            advance();^n                    }^n                } else {^n                    if (next_token.id === ';' |||| next_token.id === '!' ||||^n                        next_token.id === '(end)' |||| next_token.id === '}') {^n                        return true;^n                    }^n                    advance();^n                }^n            }^n        }];^n^n^n        function font_face() {^n            advance_identifier('font-family');^n            advance(':');^n            if (!css_name() && !css_string()) {^n                stop('expected_name_a');^n            }^n            semicolon();^n            advance_identifier('src');^n            advance(':');^n            while (true) {^n                if (next_token.string === 'local') {^n                    advance_identifier('local');^n                    advance('(');^n                    if (ux.test(next_token.string)) {^n                        stop('bad_url_a');^n                    }^n^n                    if (!css_name() && !css_string()) {^n                        stop('expected_name_a');^n                    }^n                    advance(')');^n                } else if (!css_url()) {^n                    stop('expected_a_b', next_token, 'url', artifact());^n                }^n                if (next_token.id !== ',') {^n                    break;^n                }^n                comma();^n            }^n            semicolon();^n        }^n^n^n        css_border_style = [^n            'none', 'dashed', 'dotted', 'double', 'groove',^n            'hidden', 'inset', 'outset', 'ridge', 'solid'^n        ];^n^n        css_break = [^n            'auto', 'always', 'avoid', 'left', 'right'^n        ];^n^n        css_media = {^n            'all': true,^n            'braille': true,^n            'embossed': true,^n            'handheld': true,^n            'print': true,^n            'projection': true,^n            'screen': true,^n            'speech': true,^n            'tty': true,^n            'tv': true^n        };^n^n        css_overflow = [^n            'auto', 'hidden', 'scroll', 'visible'^n        ];^n^n        css_attribute_data = {^n            background: [^n                true, 'background-attachment', 'background-color',^n                'background-image', 'background-position', 'background-repeat'^n            ],^n            'background-attachment': ['scroll', 'fixed'],^n            'background-color': ['transparent', css_color],^n            'background-image': ['none', css_url],^n            'background-position': [^n                2, [css_length, 'top', 'bottom', 'left', 'right', 'center']^n            ],^n            'background-repeat': [^n                'repeat', 'repeat-x', 'repeat-y', 'no-repeat'^n            ],^n            'border': [true, 'border-color', 'border-style', 'border-width'],^n            'border-bottom': [^n                true, 'border-bottom-color', 'border-bottom-style',^n                'border-bottom-width'^n            ],^n            'border-bottom-color': css_color,^n            'border-bottom-left-radius': css_radius,^n            'border-bottom-right-radius': css_radius,^n            'border-bottom-style': css_border_style,^n            'border-bottom-width': css_width,^n            'border-collapse': ['collapse', 'separate'],^n            'border-color': ['transparent', 4, css_color],^n            'border-left': [^n                true, 'border-left-color', 'border-left-style', 'border-left-width'^n            ],^n            'border-left-color': css_color,^n            'border-left-style': css_border_style,^n            'border-left-width': css_width,^n            'border-radius': function () {^n                function count(separator) {^n                    var n = 1;^n                    if (separator) {^n                        advance(separator);^n                    }^n                    if (!css_length()) {^n                        return false;^n                    }^n                    while (next_token.id === '(number)') {^n                        if (!css_length()) {^n                            return false;^n                        }^n                        n += 1;^n                    }^n                    if (n > 4) {^n                        warn('bad_style');^n                    }^n                    return true;^n                }^n^n                return count() && (next_token.id !== '/' |||| count('/'));^n            },^n            'border-right': [^n                true, 'border-right-color', 'border-right-style',^n                'border-right-width'^n            ],^n            'border-right-color': css_color,^n            'border-right-style': css_border_style,^n            'border-right-width': css_width,^n            'border-spacing': [2, css_length],^n            'border-style': [4, css_border_style],^n            'border-top': [^n                true, 'border-top-color', 'border-top-style', 'border-top-width'^n            ],^n            'border-top-color': css_color,^n            'border-top-left-radius': css_radius,^n            'border-top-right-radius': css_radius,^n            'border-top-style': css_border_style,^n            'border-top-width': css_width,^n            'border-width': [4, css_width],^n            bottom: [css_length, 'auto'],^n            'caption-side' : ['bottom', 'left', 'right', 'top'],^n            clear: ['both', 'left', 'none', 'right'],^n            clip: [css_shape, 'auto'],^n            color: css_color,^n            content: [^n                'open-quote', 'close-quote', 'no-open-quote', 'no-close-quote',^n                css_string, css_url, css_counter, css_attr^n            ],^n            'counter-increment': [^n                css_name, 'none'^n            ],^n            'counter-reset': [^n                css_name, 'none'^n            ],^n            cursor: [^n                css_url, 'auto', 'crosshair', 'default', 'e-resize', 'help', 'move',^n                'n-resize', 'ne-resize', 'nw-resize', 'pointer', 's-resize',^n                'se-resize', 'sw-resize', 'w-resize', 'text', 'wait'^n            ],^n            direction: ['ltr', 'rtl'],^n            display: [^n                'block', 'compact', 'inline', 'inline-block', 'inline-table',^n                'list-item', 'marker', 'none', 'run-in', 'table', 'table-caption',^n                'table-cell', 'table-column', 'table-column-group',^n                'table-footer-group', 'table-header-group', 'table-row',^n                'table-row-group'^n            ],^n            'empty-cells': ['show', 'hide'],^n            'float': ['left', 'none', 'right'],^n            font: [^n                'caption', 'icon', 'menu', 'message-box', 'small-caption',^n                'status-bar', true, 'font-size', 'font-style', 'font-weight',^n                'font-family'^n            ],^n            'font-family': css_comma_list,^n            'font-size': [^n                'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large',^n                'xx-large', 'larger', 'smaller', css_length^n            ],^n            'font-size-adjust': ['none', css_number],^n            'font-stretch': [^n                'normal', 'wider', 'narrower', 'ultra-condensed',^n                'extra-condensed', 'condensed', 'semi-condensed',^n                'semi-expanded', 'expanded', 'extra-expanded'^n            ],^n            'font-style': [^n                'normal', 'italic', 'oblique'^n            ],^n            'font-variant': [^n                'normal', 'small-caps'^n            ],^n            'font-weight': [^n                'normal', 'bold', 'bolder', 'lighter', css_number^n            ],^n            height: [css_length, 'auto'],^n            left: [css_length, 'auto'],^n            'letter-spacing': ['normal', css_length],^n            'line-height': ['normal', css_line_height],^n            'list-style': [^n                true, 'list-style-image', 'list-style-position', 'list-style-type'^n            ],^n            'list-style-image': ['none', css_url],^n            'list-style-position': ['inside', 'outside'],^n            'list-style-type': [^n                'circle', 'disc', 'square', 'decimal', 'decimal-leading-zero',^n                'lower-roman', 'upper-roman', 'lower-greek', 'lower-alpha',^n                'lower-latin', 'upper-alpha', 'upper-latin', 'hebrew', 'katakana',^n                'hiragana-iroha', 'katakana-oroha', 'none'^n            ],^n            margin: [4, css_margin],^n            'margin-bottom': css_margin,^n            'margin-left': css_margin,^n            'margin-right': css_margin,^n            'margin-top': css_margin,^n            'marker-offset': [css_length, 'auto'],^n            'max-height': [css_length, 'none'],^n            'max-width': [css_length, 'none'],^n            'min-height': css_length,^n            'min-width': css_length,^n            opacity: css_number,^n            outline: [true, 'outline-color', 'outline-style', 'outline-width'],^n            'outline-color': ['invert', css_color],^n            'outline-style': [^n                'dashed', 'dotted', 'double', 'groove', 'inset', 'none',^n                'outset', 'ridge', 'solid'^n            ],^n            'outline-width': css_width,^n            overflow: css_overflow,^n            'overflow-x': css_overflow,^n            'overflow-y': css_overflow,^n            padding: [4, css_length],^n            'padding-bottom': css_length,^n            'padding-left': css_length,^n            'padding-right': css_length,^n            'padding-top': css_length,^n            'page-break-after': css_break,^n            'page-break-before': css_break,^n            position: ['absolute', 'fixed', 'relative', 'static'],^n            quotes: [8, css_string],^n            right: [css_length, 'auto'],^n            'table-layout': ['auto', 'fixed'],^n            'text-align': ['center', 'justify', 'left', 'right'],^n            'text-decoration': [^n                'none', 'underline', 'overline', 'line-through', 'blink'^n            ],^n            'text-indent': css_length,^n            'text-shadow': ['none', 4, [css_color, css_length]],^n            'text-transform': ['capitalize', 'uppercase', 'lowercase', 'none'],^n            top: [css_length, 'auto'],^n            'unicode-bidi': ['normal', 'embed', 'bidi-override'],^n            'vertical-align': [^n                'baseline', 'bottom', 'sub', 'super', 'top', 'text-top', 'middle',^n                'text-bottom', css_length^n            ],^n            visibility: ['visible', 'hidden', 'collapse'],^n            'white-space': [^n                'normal', 'nowrap', 'pre', 'pre-line', 'pre-wrap', 'inherit'^n            ],^n            width: [css_length, 'auto'],^n            'word-spacing': ['normal', css_length],^n            'word-wrap': ['break-word', 'normal'],^n            'z-index': ['auto', css_number]^n        };^n^n        function style_attribute() {^n            var v;^n            while (next_token.id === '*' |||| next_token.id === '#' ||||^n                next_token.string === '_') {^n                if (!option.css) {^n                    warn('unexpected_a');^n                }^n                advance();^n            }^n            if (next_token.id === '-') {^n                if (!option.css) {^n                    warn('unexpected_a');^n                }^n                advance('-');^n                if (!next_token.identifier) {^n                    warn('expected_nonstandard_style_attribute');^n                }^n                advance();^n                return css_any;^n            } else {^n                if (!next_token.identifier) {^n                    warn('expected_style_attribute');^n                } else {^n                    if (Object.prototype.hasOwnProperty.call(css_attribute_data,^n                        next_token.string)) {^n                        v = css_attribute_data[next_token.string];^n                    } else {^n                        v = css_any;^n                        if (!option.css) {^n                            warn('unrecognized_style_attribute_a');^n                        }^n                    }^n                }^n                advance();^n                return v;^n            }^n        }^n^n^n        function style_value(v) {^n^n            /*jslint confusion: true */^n^n            var i = 0,^n                n,^n                once,^n                match,^n                round,^n                start = 0,^n                vi;^n            switch (typeof v) {^n                case 'function':^n                    return v();^n                case 'string':^n                    if (next_token.identifier && next_token.string === v) {^n                        advance();^n                        return true;^n                    }^n                    return false;^n            }^n            for (;;) {^n                if (i >= v.length) {^n                    return false;^n                }^n                vi = v[i];^n                i += 1;^n                if (typeof vi === 'boolean') {^n                    break;^n                } else if (typeof vi === 'number') {^n                    n = vi;^n                    vi = v[i];^n                    i += 1;^n                } else {^n                    n = 1;^n                }^n                match = false;^n                while (n > 0) {^n                    if (style_value(vi)) {^n                        match = true;^n                        n -= 1;^n                    } else {^n                        break;^n                    }^n                }^n                if (match) {^n                    return true;^n                }^n            }^n            start = i;^n            once = [];^n            for (;;) {^n                round = false;^n                for (i = start; i < v.length; i += 1) {^n                    if (!once[i]) {^n                        if (style_value(css_attribute_data[v[i]])) {^n                            match = true;^n                            round = true;^n                            once[i] = true;^n                            break;^n                        }^n                    }^n                }^n                if (!round) {^n                    return match;^n                }^n            }^n        }^n^n        function style_child() {^n            if (next_token.id === '(number)') {^n                advance();^n                if (next_token.string === 'n' && next_token.identifier) {^n                    no_space_only();^n                    advance();^n                    if (next_token.id === '+') {^n                        no_space_only();^n                        advance('+');^n                        no_space_only();^n                        advance('(number)');^n                    }^n                }^n                return;^n            } else {^n                if (next_token.identifier &&^n                    (next_token.string === 'odd' |||| next_token.string === 'even')) {^n                    advance();^n                    return;^n                }^n            }^n            warn('unexpected_a');^n        }^n^n        function substyle() {^n            var v;^n            for (;;) {^n                if (next_token.id === '}' |||| next_token.id === '(end)' ||||^n                    (xquote && next_token.id === xquote)) {^n                    return;^n                }^n                v = style_attribute();^n                advance(':');^n                if (next_token.identifier && next_token.string === 'inherit') {^n                    advance();^n                } else {^n                    if (!style_value(v)) {^n                        warn('unexpected_a');^n                        advance();^n                    }^n                }^n                if (next_token.id === '!') {^n                    advance('!');^n                    no_space_only();^n                    if (next_token.identifier && next_token.string === 'important') {^n                        advance();^n                    } else {^n                        warn('expected_a_b',^n                            next_token, 'important', artifact());^n                    }^n                }^n                if (next_token.id === '}' |||| next_token.id === xquote) {^n                    warn('expected_a_b', next_token, ';', artifact());^n                } else {^n                    semicolon();^n                }^n            }^n        }^n^n        function style_selector() {^n            if (next_token.identifier) {^n                if (!Object.prototype.hasOwnProperty.call(html_tag, option.cap ?^n                    next_token.string.toLowerCase() : next_token.string)) {^n                    warn('expected_tagname_a');^n                }^n                advance();^n            } else {^n                switch (next_token.id) {^n                    case '>':^n                    case '+':^n                        advance();^n                        style_selector();^n                        break;^n                    case ':':^n                        advance(':');^n                        switch (next_token.string) {^n                            case 'active':^n                            case 'after':^n                            case 'before':^n                            case 'checked':^n                            case 'disabled':^n                            case 'empty':^n                            case 'enabled':^n                            case 'first-child':^n                            case 'first-letter':^n                            case 'first-line':^n                            case 'first-of-type':^n                            case 'focus':^n                            case 'hover':^n                            case 'last-child':^n                            case 'last-of-type':^n                            case 'link':^n                            case 'only-of-type':^n                            case 'root':^n                            case 'target':^n                            case 'visited':^n                                advance_identifier(next_token.string);^n                                break;^n                            case 'lang':^n                                advance_identifier('lang');^n                                advance('(');^n                                if (!next_token.identifier) {^n                                    warn('expected_lang_a');^n                                }^n                                advance(')');^n                                break;^n                            case 'nth-child':^n                            case 'nth-last-child':^n                            case 'nth-last-of-type':^n                            case 'nth-of-type':^n                                advance_identifier(next_token.string);^n                                advance('(');^n                                style_child();^n                                advance(')');^n                                break;^n                            case 'not':^n                                advance_identifier('not');^n                                advance('(');^n                                if (next_token.id === ':' && peek(0).string === 'not') {^n                                    warn('not');^n                                }^n                                style_selector();^n                                advance(')');^n                                break;^n                            default:^n                                warn('expected_pseudo_a');^n                        }^n                        break;^n                    case '#':^n                        advance('#');^n                        if (!next_token.identifier) {^n                            warn('expected_id_a');^n                        }^n                        advance();^n                        break;^n                    case '*':^n                        advance('*');^n                        break;^n                    case '.':^n                        advance('.');^n                        if (!next_token.identifier) {^n                            warn('expected_class_a');^n                        }^n                        advance();^n                        break;^n                    case '[':^n                        advance('[');^n                        if (!next_token.identifier) {^n                            warn('expected_attribute_a');^n                        }^n                        advance();^n                        if (next_token.id === '=' |||| next_token.string === '~=' ||||^n                            next_token.string === '$=' ||||^n                            next_token.string === '||=' ||||^n                            next_token.id === '*=' ||||^n                            next_token.id === '^^=') {^n                            advance();^n                            if (next_token.id !== '(string)') {^n                                warn('expected_string_a');^n                            }^n                            advance();^n                        }^n                        advance(']');^n                        break;^n                    default:^n                        stop('expected_selector_a');^n                }^n            }^n        }^n^n        function style_pattern() {^n            if (next_token.id === '{') {^n                warn('expected_style_pattern');^n            }^n            for (;;) {^n                style_selector();^n                if (next_token.id === '</' |||| next_token.id === '{' ||||^n                    next_token.id === '}' |||| next_token.id === '(end)') {^n                    return '';^n                }^n                if (next_token.id === ',') {^n                    comma();^n                }^n            }^n        }^n^n        function style_list() {^n            while (next_token.id !== '}' && next_token.id !== '</' &&^n                next_token.id !== '(end)') {^n                style_pattern();^n                xmode = 'styleproperty';^n                if (next_token.id === ';') {^n                    semicolon();^n                } else {^n                    advance('{');^n                    substyle();^n                    xmode = 'style';^n                    advance('}');^n                }^n            }^n        }^n^n        function styles() {^n            var i;^n            while (next_token.id === '|@') {^n                i = peek(0);^n                advance('|@');^n                switch (next_token.string) {^n                    case 'import':^n                        advance_identifier('import');^n                        if (!css_url()) {^n                            warn('expected_a_b',^n                                next_token, 'url', artifact());^n                            advance();^n                        }^n                        semicolon();^n                        break;^n                    case 'media':^n                        advance_identifier('media');^n                        for (;;) {^n                            if (!next_token.identifier |||| css_media[next_token.string] !== true) {^n                                stop('expected_media_a');^n                            }^n                            advance();^n                            if (next_token.id !== ',') {^n                                break;^n                            }^n                            comma();^n                        }^n                        advance('{');^n                        style_list();^n                        advance('}');^n                        break;^n                    case 'font-face':^n                        advance_identifier('font-face');^n                        advance('{');^n                        font_face();^n                        advance('}');^n                        break;^n                    default:^n                        stop('expected_at_a');^n                }^n            }^n            style_list();^n        }^n^n^n// Parse HTML^n^n        function do_begin(n) {^n            if (n !== 'html' && !option.fragment) {^n                if (n === 'div' && option.adsafe) {^n                    stop('adsafe_fragment');^n                } else {^n                    stop('expected_a_b', token, 'html', n);^n                }^n            }^n            if (option.adsafe) {^n                if (n === 'html') {^n                    stop('adsafe_html', token);^n                }^n                if (option.fragment) {^n                    if (n !== 'div') {^n                        stop('adsafe_div', token);^n                    }^n                } else {^n                    stop('adsafe_fragment', token);^n                }^n            }^n            option.browser = true;^n        }^n^n        function do_attribute(a, v) {^n            var u, x;^n            if (a === 'id') {^n                u = typeof v === 'string' ? v.toUpperCase() : '';^n                if (ids[u] === true) {^n                    warn('duplicate_a', next_token, v);^n                }^n                if (!/^^[A-Za-z][A-Za-z0-9._:\-]*$/.test(v)) {^n                    warn('bad_id_a', next_token, v);^n                } else if (option.adsafe) {^n                    if (adsafe_id) {^n                        if (v.slice(0, adsafe_id.length) !== adsafe_id) {^n                            warn('adsafe_prefix_a', next_token, adsafe_id);^n                        } else if (!/^^[A-Z]+_[A-Z]+$/.test(v)) {^n                            warn('adsafe_bad_id');^n                        }^n                    } else {^n                        adsafe_id = v;^n                        if (!/^^[A-Z]+_$/.test(v)) {^n                            warn('adsafe_bad_id');^n                        }^n                    }^n                }^n                x = v.search(dx);^n                if (x >= 0) {^n                    warn('unexpected_char_a_b', token, v.charAt(x), a);^n                }^n                ids[u] = true;^n            } else if (a === 'class' |||| a === 'type' |||| a === 'name') {^n                x = v.search(qx);^n                if (x >= 0) {^n                    warn('unexpected_char_a_b', token, v.charAt(x), a);^n                }^n                ids[u] = true;^n            } else if (a === 'href' |||| a === 'background' ||||^n                a === 'content' |||| a === 'data' ||||^n                a.indexOf('src') >= 0 |||| a.indexOf('url') >= 0) {^n                if (option.safe && ux.test(v)) {^n                    stop('bad_url_a', next_token, v);^n                }^n                urls.push(v);^n            } else if (a === 'for') {^n                if (option.adsafe) {^n                    if (adsafe_id) {^n                        if (v.slice(0, adsafe_id.length) !== adsafe_id) {^n                            warn('adsafe_prefix_a', next_token, adsafe_id);^n                        } else if (!/^^[A-Z]+_[A-Z]+$/.test(v)) {^n                            warn('adsafe_bad_id');^n                        }^n                    } else {^n                        warn('adsafe_bad_id');^n                    }^n                }^n            } else if (a === 'name') {^n                if (option.adsafe && v.indexOf('_') >= 0) {^n                    warn('adsafe_name_a', next_token, v);^n                }^n            }^n        }^n^n        function do_tag(name, attribute) {^n            var i, tag = html_tag[name], script, x;^n            src = false;^n            if (!tag) {^n                stop(^n                    bundle.unrecognized_tag_a,^n                    next_token,^n                    name === name.toLowerCase() ? name : name + ' (capitalization error)'^n                );^n            }^n            if (stack.length > 0) {^n                if (name === 'html') {^n                    stop('unexpected_a', token, name);^n                }^n                x = tag.parent;^n                if (x) {^n                    if (x.indexOf(' ' + stack[stack.length - 1].name + ' ') < 0) {^n                        stop('tag_a_in_b', token, name, x);^n                    }^n                } else if (!option.adsafe && !option.fragment) {^n                    i = stack.length;^n                    do {^n                        if (i <= 0) {^n                            stop('tag_a_in_b', token, name, 'body');^n                        }^n                        i -= 1;^n                    } while (stack[i].name !== 'body');^n                }^n            }^n            switch (name) {^n                case 'div':^n                    if (option.adsafe && stack.length === 1 && !adsafe_id) {^n                        warn('adsafe_missing_id');^n                    }^n                    break;^n                case 'script':^n                    xmode = 'script';^n                    advance('>');^n                    if (attribute.lang) {^n                        warn('lang', token);^n                    }^n                    if (option.adsafe && stack.length !== 1) {^n                        warn('adsafe_placement', token);^n                    }^n                    if (attribute.src) {^n                        if (option.adsafe && (!adsafe_may |||| !approved[attribute.src])) {^n                            warn('adsafe_source', token);^n                        }^n                        if (attribute.type) {^n                            warn('type', token);^n                        }^n                    } else {^n                        step_in(next_token.from);^n                        edge();^n                        use_strict();^n                        adsafe_top = true;^n                        script = statements();^n^n// JSLint is also the static analyzer for ADsafe. See www.ADsafe.org.^n^n                        if (option.adsafe) {^n                            if (adsafe_went) {^n                                stop('adsafe_script', token);^n                            }^n                            if (script.length !== 1 ||||^n                                aint(script[0], 'id', '(') ||||^n                                aint(script[0].first, 'id', '.') ||||^n                                aint(script[0].first.first, 'string', 'ADSAFE') ||||^n                                aint(script[0].second[0], 'string', adsafe_id)) {^n                                stop('adsafe_id_go');^n                            }^n                            switch (script[0].first.second.string) {^n                                case 'id':^n                                    if (adsafe_may |||| adsafe_went ||||^n                                        script[0].second.length !== 1) {^n                                        stop('adsafe_id', next_token);^n                                    }^n                                    adsafe_may = true;^n                                    break;^n                                case 'go':^n                                    if (adsafe_went) {^n                                        stop('adsafe_go');^n                                    }^n                                    if (script[0].second.length !== 2 ||||^n                                        aint(script[0].second[1], 'id', 'function') ||||^n                                        !script[0].second[1].first ||||^n                                        script[0].second[1].first.length !== 2 ||||^n                                        aint(script[0].second[1].first[0], 'string', 'dom') ||||^n                                        aint(script[0].second[1].first[1], 'string', 'lib')) {^n                                        stop('adsafe_go', next_token);^n                                    }^n                                    adsafe_went = true;^n                                    break;^n                                default:^n                                    stop('adsafe_id_go');^n                            }^n                        }^n                        indent = null;^n                    }^n                    xmode = 'html';^n                    advance('</');^n                    advance_identifier('script');^n                    xmode = 'outer';^n                    break;^n                case 'style':^n                    xmode = 'style';^n                    advance('>');^n                    styles();^n                    xmode = 'html';^n                    advance('</');^n                    advance_identifier('style');^n                    break;^n                case 'input':^n                    switch (attribute.type) {^n                        case 'button':^n                        case 'checkbox':^n                        case 'radio':^n                        case 'reset':^n                        case 'submit':^n                            break;^n                        case 'file':^n                        case 'hidden':^n                        case 'image':^n                        case 'password':^n                        case 'text':^n                            if (option.adsafe && attribute.autocomplete !== 'off') {^n                                warn('adsafe_autocomplete');^n                            }^n                            break;^n                        default:^n                            warn('bad_type');^n                    }^n                    break;^n                case 'applet':^n                case 'body':^n                case 'embed':^n                case 'frame':^n                case 'frameset':^n                case 'head':^n                case 'iframe':^n                case 'noembed':^n                case 'noframes':^n                case 'object':^n                case 'param':^n                    if (option.adsafe) {^n                        warn('adsafe_tag', next_token, name);^n                    }^n                    break;^n            }^n        }^n^n^n        function closetag(name) {^n            return '</' + name + '>';^n        }^n^n        function html() {^n^n            /*jslint confusion: true */^n^n            var attribute, attributes, is_empty, name, old_white = option.white,^n                quote, tag_name, tag, wmode;^n            xmode = 'html';^n            xquote = '';^n            stack = null;^n            for (;;) {^n                switch (next_token.string) {^n                    case '<':^n                        xmode = 'html';^n                        advance('<');^n                        attributes = {};^n                        tag_name = next_token;^n                        name = tag_name.string;^n                        advance_identifier(name);^n                        if (option.cap) {^n                            name = name.toLowerCase();^n                        }^n                        tag_name.name = name;^n                        if (!stack) {^n                            stack = [];^n                            do_begin(name);^n                        }^n                        tag = html_tag[name];^n                        if (typeof tag !== 'object') {^n                            stop('unrecognized_tag_a', tag_name, name);^n                        }^n                        is_empty = tag.empty;^n                        tag_name.type = name;^n                        for (;;) {^n                            if (next_token.id === '/') {^n                                advance('/');^n                                if (next_token.id !== '>') {^n                                    warn('expected_a_b', next_token, '>', artifact());^n                                }^n                                break;^n                            }^n                            if (next_token.id && next_token.id.charAt(0) === '>') {^n                                break;^n                            }^n                            if (!next_token.identifier) {^n                                if (next_token.id === '(end)' |||| next_token.id === '(error)') {^n                                    warn('expected_a_b', next_token, '>', artifact());^n                                }^n                                warn('bad_name_a');^n                            }^n                            option.white = false;^n                            spaces();^n                            attribute = next_token.string;^n                            option.white = old_white;^n                            advance();^n                            if (!option.cap && attribute !== attribute.toLowerCase()) {^n                                warn('attribute_case_a', token);^n                            }^n                            attribute = attribute.toLowerCase();^n                            xquote = '';^n                            if (Object.prototype.hasOwnProperty.call(attributes, attribute)) {^n                                warn('duplicate_a', token, attribute);^n                            }^n                            if (attribute.slice(0, 2) === 'on') {^n                                if (!option.on) {^n                                    warn('html_handlers');^n                                }^n                                xmode = 'scriptstring';^n                                advance('=');^n                                quote = next_token.id;^n                                if (quote !== '"' && quote !== '\'') {^n                                    stop('expected_a_b', next_token, '"', artifact());^n                                }^n                                xquote = quote;^n                                wmode = option.white;^n                                option.white = true;^n                                advance(quote);^n                                use_strict();^n                                statements();^n                                option.white = wmode;^n                                if (next_token.id !== quote) {^n                                    stop('expected_a_b', next_token, quote, artifact());^n                                }^n                                xmode = 'html';^n                                xquote = '';^n                                advance(quote);^n                                tag = false;^n                            } else if (attribute === 'style') {^n                                xmode = 'scriptstring';^n                                advance('=');^n                                quote = next_token.id;^n                                if (quote !== '"' && quote !== '\'') {^n                                    stop('expected_a_b', next_token, '"', artifact());^n                                }^n                                xmode = 'styleproperty';^n                                xquote = quote;^n                                advance(quote);^n                                substyle();^n                                xmode = 'html';^n                                xquote = '';^n                                advance(quote);^n                                tag = false;^n                            } else {^n                                if (next_token.id === '=') {^n                                    advance('=');^n                                    tag = next_token.string;^n                                    if (!next_token.identifier &&^n                                        next_token.id !== '"' &&^n                                        next_token.id !== '\'' &&^n                                        next_token.id !== '(string)' &&^n                                        next_token.id !== '(string)' &&^n                                        next_token.id !== '(color)') {^n                                        warn('expected_attribute_value_a', token, attribute);^n                                    }^n                                    advance();^n                                } else {^n                                    tag = true;^n                                }^n                            }^n                            attributes[attribute] = tag;^n                            do_attribute(attribute, tag);^n                        }^n                        do_tag(name, attributes);^n                        if (!is_empty) {^n                            stack.push(tag_name);^n                        }^n                        xmode = 'outer';^n                        advance('>');^n                        break;^n                    case '</':^n                        xmode = 'html';^n                        advance('</');^n                        if (!next_token.identifier) {^n                            warn('bad_name_a');^n                        }^n                        name = next_token.string;^n                        if (option.cap) {^n                            name = name.toLowerCase();^n                        }^n                        advance();^n                        if (!stack) {^n                            stop('unexpected_a', next_token, closetag(name));^n                        }^n                        tag_name = stack.pop();^n                        if (!tag_name) {^n                            stop('unexpected_a', next_token, closetag(name));^n                        }^n                        if (tag_name.name !== name) {^n                            stop('expected_a_b',^n                                next_token, closetag(tag_name.name), closetag(name));^n                        }^n                        if (next_token.id !== '>') {^n                            stop('expected_a_b', next_token, '>', artifact());^n                        }^n                        xmode = 'outer';^n                        advance('>');^n                        break;^n                    case '<!':^n                        if (option.safe) {^n                            warn('adsafe_a');^n                        }^n                        xmode = 'html';^n                        for (;;) {^n                            advance();^n                            if (next_token.id === '>' |||| next_token.id === '(end)') {^n                                break;^n                            }^n                            if (next_token.string.indexOf('--') >= 0) {^n                                stop('unexpected_a', next_token, '--');^n                            }^n                            if (next_token.string.indexOf('<') >= 0) {^n                                stop('unexpected_a', next_token, '<');^n                            }^n                            if (next_token.string.indexOf('>') >= 0) {^n                                stop('unexpected_a', next_token, '>');^n                            }^n                        }^n                        xmode = 'outer';^n                        advance('>');^n                        break;^n                    case '(end)':^n                        return;^n                    default:^n                        if (next_token.id === '(end)') {^n                            stop('missing_a', next_token,^n                                '</' + stack[stack.length - 1].string + '>');^n                        } else {^n                            advance();^n                        }^n                }^n                if (stack && stack.length === 0 && (option.adsafe ||||^n                    !option.fragment |||| next_token.id === '(end)')) {^n                    break;^n                }^n            }^n            if (next_token.id !== '(end)') {^n                stop('unexpected_a');^n            }^n        }^n^n^n// The actual JSLINT function itself.^n^n        itself = function JSLint(the_source, the_option) {^n^n            var i, predef, tree;^n            JSLINT.errors = [];^n            JSLINT.tree = '';^n            begin = prev_token = token = next_token =^n                Object.create(syntax['(begin)']);^n            predefined = {};^n            add_to_predefined(standard);^n            property_type = Object.create(standard_property_type);^n            if (the_option) {^n                option = Object.create(the_option);^n                predef = option.predef;^n                if (predef) {^n                    if (Array.isArray(predef)) {^n                        for (i = 0; i < predef.length; i += 1) {^n                            predefined[predef[i]] = true;^n                        }^n                    } else if (typeof predef === 'object') {^n                        add_to_predefined(predef);^n                    }^n                }^n                do_safe();^n            } else {^n                option = {};^n            }^n            if(!option.indent) option.indent = 4;^n            else option.indent = +option.indent;^n            if(!option.maxerr) option.maxerr = 50;^n            else option.maxerr = +option.maxerr;^n            adsafe_id = '';^n            adsafe_may = adsafe_top = adsafe_went = false;^n            approved = {};^n            if (option.approved) {^n                for (i = 0; i < option.approved.length; i += 1) {^n                    approved[option.approved[i]] = option.approved[i];^n                }^n            } else {^n                approved.test = 'test';^n            }^n            tab = '';^n            for (i = 0; i < option.indent; i += 1) {^n                tab += ' ';^n            }^n            global_scope = scope = {};^n            global_funct = funct = {^n                '(scope)': scope,^n                '(breakage)': 0,^n                '(loopage)': 0^n            };^n            functions = [funct];^n^n            comments_off = false;^n            ids = {};^n            in_block = false;^n            indent = null;^n            json_mode = false;^n            lookahead = [];^n            member = {};^n            node_js = false;^n            prereg = true;^n            src = false;^n            stack = null;^n            strict_mode = false;^n            urls = [];^n            var_mode = null;^n            warnings = 0;^n            xmode = '';^n            lex.init(the_source);^n^n            assume();^n^n            try {^n                advance();^n                if (next_token.id === '(number)') {^n                    stop('unexpected_a');^n                } else if (next_token.string.charAt(0) === '<') {^n                    html();^n                    if (option.adsafe && !adsafe_went) {^n                        warn('adsafe_go', this);^n                    }^n                } else {^n                    switch (next_token.id) {^n                        case '{':^n                        case '[':^n                            json_mode = true;^n                            json_value();^n                            break;^n                        case '|@':^n                        case '*':^n                        case '#':^n                        case '.':^n                        case ':':^n                            xmode = 'style';^n                            advance();^n                            if (token.id !== '|@' |||| !next_token.identifier ||||^n                                next_token.string !== 'charset' |||| token.line !== 1 ||||^n                                token.from !== 1) {^n                                stop('css');^n                            }^n                            advance();^n                            if (next_token.id !== '(string)' &&^n                                next_token.string !== 'UTF-8') {^n                                stop('css');^n                            }^n                            advance();^n                            semicolon();^n                            styles();^n                            break;^n^n                        default:^n                            if (option.adsafe && option.fragment) {^n                                stop('expected_a_b',^n                                    next_token, '<div>', artifact());^n                            }^n^n// If the first token is a semicolon, ignore it. This is sometimes used when^n// files are intended to be appended to files that may be sloppy. A sloppy^n// file may be depending on semicolon insertion on its last line.^n^n                            step_in(1);^n                            if (next_token.id === ';' && !node_js) {^n                                semicolon();^n                            }^n                            adsafe_top = true;^n                            tree = statements();^n                            begin.first = tree;^n                            JSLINT.tree = begin;^n                            // infer_types(tree);^n                            if (option.adsafe && (tree.length !== 1 ||||^n                                aint(tree[0], 'id', '(') ||||^n                                aint(tree[0].first, 'id', '.') ||||^n                                aint(tree[0].first.first, 'string', 'ADSAFE') ||||^n                                aint(tree[0].first.second, 'string', 'lib') ||||^n                                tree[0].second.length !== 2 ||||^n                                tree[0].second[0].id !== '(string)' ||||^n                                aint(tree[0].second[1], 'id', 'function'))) {^n                                stop('adsafe_lib');^n                            }^n                            if (tree.disrupt) {^n                                warn('weird_program', prev_token);^n                            }^n                    }^n                }^n                indent = null;^n                advance('(end)');^n            } catch (e) {^n                if (e) { // `~^n                    JSLINT.errors.push({^n                        reason : e.message,^n                        line : e.line |||| next_token.line,^n                        character : e.character |||| next_token.from^n                    }, null);^n                }^n            }^n            return JSLINT.errors.length === 0;^n        };^n^n^n// Data summary.^n^n        itself.data = function () {^n            var data = {functions: []},^n                function_data,^n                globals,^n                i,^n                j,^n                kind,^n                members = [],^n                name,^n                the_function,^n                undef = [],^n                unused = [];^n            if (itself.errors.length) {^n                data.errors = itself.errors;^n            }^n^n            if (json_mode) {^n                data.json = true;^n            }^n^n            if (urls.length > 0) {^n                data.urls = urls;^n            }^n^n            globals = Object.keys(global_scope).filter(function (value) {^n                return value.charAt(0) !== '(' && typeof standard[value] !== 'boolean';^n            });^n            if (globals.length > 0) {^n                data.globals = globals;^n            }^n^n            for (i = 1; i < functions.length; i += 1) {^n                the_function = functions[i];^n                function_data = {};^n                for (j = 0; j < functionicity.length; j += 1) {^n                    function_data[functionicity[j]] = [];^n                }^n                for (name in the_function) {^n                    if (Object.prototype.hasOwnProperty.call(the_function, name)) {^n                        if (name.charAt(0) !== '(') {^n                            kind = the_function[name];^n                            if (kind === 'unction' |||| kind === 'unparam') {^n                                kind = 'unused';^n                            }^n                            if (Array.isArray(function_data[kind])) {^n                                function_data[kind].push(name);^n                                if (kind === 'unused') {^n                                    unused.push({^n                                        name: name,^n                                        line: the_function['(line)'],^n                                        'function': the_function['(name)']^n                                    });^n                                } else if (kind === 'undef') {^n                                    undef.push({^n                                        name: name,^n                                        line: the_function['(line)'],^n                                        'function': the_function['(name)']^n                                    });^n                                }^n                            }^n                        }^n                    }^n                }^n                for (j = 0; j < functionicity.length; j += 1) {^n                    if (function_data[functionicity[j]].length === 0) {^n                        delete function_data[functionicity[j]];^n                    }^n                }^n                function_data.name = the_function['(name)'];^n                function_data.params = the_function['(params)'];^n                function_data.line = the_function['(line)'];^n                function_data['(complexity)'] = the_function['(complexity)'];^n                data.functions.push(function_data);^n            }^n^n            if (unused.length > 0) {^n                data.unused = unused;^n            }^n            if (undef.length > 0) {^n                data['undefined'] = undef;^n            }^n^n            members = [];^n            for (name in member) {^n                if (typeof member[name] === 'number') {^n                    data.member = member;^n                    break;^n                }^n            }^n^n            return data;^n        };^n^n^n        itself.report = function (errors_only) {^n            var data = itself.data(), err, evidence, i, italics, j, key, keys, length,^n                mem = '', name, names, output = [], snippets, the_function, type,^n                warning;^n^n            function detail(h, value) {^n                var comma_needed, singularity;^n                if (Array.isArray(value)) {^n                    output.push('<div><i>' + h + '</i> ');^n                    value.sort().forEach(function (item) {^n                        if (item !== singularity) {^n                            singularity = item;^n                            output.push((comma_needed ? ', ' : '') + singularity);^n                            comma_needed = true;^n                        }^n                    });^n                    output.push('</div>');^n                } else if (value) {^n                    output.push('<div><i>' + h + '</i> ' + value + '</div>');^n                }^n            }^n^n            if (data.errors |||| data.unused |||| data['undefined']) {^n                err = true;^n                output.push('<div id=errors><i>Error:</i>');^n                if (data.errors) {^n                    for (i = 0; i < data.errors.length; i += 1) {^n                        warning = data.errors[i];^n                        if (warning) {^n                            evidence = warning.evidence |||| '';^n                            output.push('<p>Problem' + (isFinite(warning.line) ?^n                                ' at line ' + String(warning.line) + ' character ' +^n                                    String(warning.character) : '') +^n                                ': ' + warning.reason.entityify() +^n                                '</p><p class=evidence>' +^n                                (evidence && (evidence.length > 80 ? evidence.slice(0, 77) + '...' :^n                                    evidence).entityify()) + '</p>');^n                        }^n                    }^n                }^n^n                if (data['undefined']) {^n                    snippets = [];^n                    for (i = 0; i < data['undefined'].length; i += 1) {^n                        snippets[i] = '<code><u>' + data['undefined'][i].name + '</u></code>&nbsp;<i>' +^n                            String(data['undefined'][i].line) + ' </i> <small>' +^n                            data['undefined'][i]['function'] + '</small>';^n                    }^n                    output.push('<p><i>Undefined variable:</i> ' + snippets.join(', ') + '</p>');^n                }^n                if (data.unused) {^n                    snippets = [];^n                    for (i = 0; i < data.unused.length; i += 1) {^n                        snippets[i] = '<code><u>' + data.unused[i].name + '</u></code>&nbsp;<i>' +^n                            String(data.unused[i].line) + ' </i> <small>' +^n                            data.unused[i]['function'] + '</small>';^n                    }^n                    output.push('<p><i>Unused variable:</i> ' + snippets.join(', ') + '</p>');^n                }^n                if (data.json) {^n                    output.push('<p>JSON: bad.</p>');^n                }^n                output.push('</div>');^n            }^n^n            if (!errors_only) {^n^n                output.push('<br><div id=functions>');^n^n                if (data.urls) {^n                    detail("URLs<br>", data.urls, '<br>');^n                }^n^n                if (xmode === 'style') {^n                    output.push('<p>CSS.</p>');^n                } else if (data.json && !err) {^n                    output.push('<p>JSON: good.</p>');^n                } else if (data.globals) {^n                    output.push('<div><i>Global</i> ' +^n                        data.globals.sort().join(', ') + '</div>');^n                } else {^n                    output.push('<div><i>No new global variables introduced.</i></div>');^n                }^n^n                for (i = 0; i < data.functions.length; i += 1) {^n                    the_function = data.functions[i];^n                    names = [];^n                    if (the_function.params) {^n                        for (j = 0; j < the_function.params.length; j += 1) {^n                            names[j] = the_function.params[j].string;^n                        }^n                    }^n                    output.push('<br><div class=function><i>' +^n                        String(the_function.line) + '</i> ' +^n                        the_function.name.entityify() +^n                        '(' + names.join(', ') + ')</div>');^n                    detail('<big><b>Undefined</b></big>', the_function['undefined']);^n                    detail('<big><b>Unused</b></big>', the_function.unused);^n                    detail('Closure', the_function.closure);^n                    detail('Variable', the_function['var']);^n                    detail('Exception', the_function.exception);^n                    detail('Outer', the_function.outer);^n                    detail('Global', the_function.global);^n                    detail('Label', the_function.label);^n                    detail('Complexity', the_function['(complexity)']);^n                }^n^n                if (data.member) {^n                    keys = Object.keys(data.member);^n                    if (keys.length) {^n                        keys = keys.sort();^n                        output.push('<br><pre id=properties>/*properties<br>');^n                        mem = ' ';^n                        italics = 0;^n                        j = 0;^n                        if (option.confusion) {^n                            for (i = 0; i < keys.length; i += 1) {^n                                key = keys[i];^n                                if (typeof standard_property_type[key] !== 'string') {^n                                    name = ix.test(key) ? key :^n                                        '\'' + key.entityify().replace(nx, sanitize) + '\'';^n                                    if (data.member[key] === 1) {^n                                        name = '<i>' + name + '</i>';^n                                        italics += 1;^n                                        j = 1;^n                                    }^n                                    if (i < keys.length - 1) {^n                                        name += ', ';^n                                    }^n                                    if (mem.length + name.length - (italics * 7) > 80) {^n                                        output.push(mem + '<br>');^n                                        mem = ' ';^n                                        italics = j;^n                                    }^n                                    mem += name;^n                                    j = 0;^n                                }^n                            }^n                        } else {^n                            for (i = 0; i < keys.length; i += 1) {^n                                key = keys[i];^n                                type = property_type[key];^n                                if (typeof type !== 'string') {^n                                    type = '';^n                                }^n                                if (standard_property_type[key] !== type) {^n                                    name = ix.test(key) ? key :^n                                        '\'' + key.entityify().replace(nx, sanitize) + '\'';^n                                    length += name.length + 2;^n                                    if (data.member[key] === 1) {^n                                        name = '<i>' + name + '</i>';^n                                        italics += 1;^n                                        j = 1;^n                                    }^n                                    if (type) {^n                                        name += ': ' + type;^n                                    }^n                                    if (i < keys.length - 1) {^n                                        name += ', ';^n                                    }^n                                    if (mem.length + name.length - (italics * 7) > 80) {^n                                        output.push(mem + '<br>');^n                                        mem = ' ';^n                                        italics = j;^n                                    }^n                                    mem += name;^n                                    j = 0;^n                                }^n                            }^n                        }^n                        output.push(mem + '<br>*/</pre>');^n                    }^n                    output.push('</div>');^n                }^n            }^n            return output.join('');^n        };^n        itself.jslint = itself;^n^n        itself.edition = '2011-08-15';^n^n        return itself;^n^n    }());^n^n    function dumpObj(obj) {^n        var str = "";^n        for (var key in obj) {^n            str += "{" + key + "->" + obj[key] + "}";^n        }^n        return obj.toString() + " of type " + (typeof obj) + " with properties " + str;^n    }^n^n    function runLinter(linter) {^n        var options = {};^n        var _options = String(params[0]);^n        var _source = String(params[1]);^n        var optionsArray = _options.split(',');^n^n^n        for (var i = 0; i < optionsArray.length; ++i) {^n            var o = optionsArray[i];^n            var index = o.indexOf(':');^n            var key = o.substr(0, index);^n            var valueString = o.substr(index + 1);^n            var value = "true".equals(valueString) ? true:"false".equals(valueString) ? false:valueString.replace('^^',',');^n^n            if ("predef".equals(key)) {^n                var predefArray = value.split(',');^n                var objectLiteralValue = {};^n^n                for(var j = 0; j < predefArray.length; ++j) {^n                    var predefName = predefArray[j];^n                    while(predefName.charAt(0) == ' ') predefName = predefName.substring(1);^n                    var index2 = predefName.indexOf(':');^n                    objectLiteralValue[predefName.substr(0, index2 != -1 ? index2:predefName.length)] = index2 != -1 ? "true".equals(predefName.substr(index2 + 1)):false;^n                }^n                value = objectLiteralValue;^n            }^n            options[key] = value;^n        }^n        linter(_source, options);^n^n        var result = "";^n        for (var i = 0; i < linter.errors.length; ++i) {^n            var m = linter.errors[i];^n            if (m == null) break;^n            if (result.length > 0) result += "\n";^n            result += m.line + "^^^^^^" + m.character + "^^^^^^" + m.reason;^n        }^n^n        return result;^n    }^n^n    return runLinter(JSLINT);^n})();^n@
